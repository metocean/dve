// Generated by CoffeeScript 1.9.1
var calculate_layout, d3,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

d3 = require('d3');

calculate_layout = function(dimensions) {
  var canvas, info, title;
  dimensions = {
    width: 600,
    height: 400
  };
  info = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 200
  };
  title = {
    top: 0,
    right: dimensions.width - info.left,
    bottom: 0,
    left: 0,
    height: dimensions.height,
    width: info.left
  };
  canvas = {
    top: info.top + 25,
    right: info.right - 50,
    bottom: info.bottom - 50,
    left: info.left + 25,
    width: dimensions.width - info.left - info.right - 50,
    height: dimensions.height - info.top - info.bottom - 50
  };
  return {
    dimensions: dimensions,
    info: info,
    title: title,
    canvas: canvas
  };
};

module.exports = function(dom, options) {
  var angle, arc, axis, calculate_direction, calculate_speed_category, circlecontainer, colorScale, components, d, data, diameter, dimensions, dir, domain, filteredData, frequency, getSpeeds, groupedData, hub, inner, items, j, layout, len, scale, segment, spec, svg, textcolorScale;
  components = options.components, spec = options.spec, dimensions = options.dimensions, data = options.data, domain = options.domain, hub = options.hub;
  layout = calculate_layout(dimensions);
  svg = d3.select(dom).append('svg').attr('class', 'item windrose');
  data = data.map(function(d) {
    var result;
    result = {
      time: d.time,
      wsp: +d.wsp,
      wd: +d.wd
    };
    return result;
  });
  data = data.filter(function(d) {
    if ((d.wd != null) && (d.wsp != null)) {
      return d;
    }
  });
  filteredData = data.filter(function(d) {
    return +d.time >= +domain[0] && +d.time <= +domain[1];
  });
  svg.attr('width', layout.dimensions.width).attr('height', layout.dimensions.height);
  svg.append('g').attr('class', 'title').attr('transform', "translate(" + layout.title.left + "," + layout.title.top + ")").append('text').attr('class', 'infotext').text(spec.text).attr('dy', 18).attr('dx', 5);
  inner = svg.append('g').attr('class', 'inner').attr('transform', "translate(" + (layout.canvas.left + layout.canvas.width / 2) + "," + (layout.canvas.top + layout.canvas.height / 2) + ")");
  frequency = {
    N: [],
    NNE: [],
    NE: [],
    ENE: [],
    E: [],
    ESE: [],
    SE: [],
    SSE: [],
    S: [],
    SSW: [],
    SW: [],
    WSW: [],
    W: [],
    WNW: [],
    NW: [],
    NNW: []
  };
  colorScale = d3.scale.quantize().range(['#E4EAF1', '#D1D8E3', '#BEC7D5', '#ABB6C7', '#98A5B9', '#8594AB', '#73829E', '#607190', '#4D6082', '#3A4E74', '#273D66', '#142C58', '#122851', '#102448']).domain([0, 13]);
  textcolorScale = d3.scale.quantize().range(['#000000', '#000000', '#ffffff', '#ffffff']).domain([0, 13]);
  calculate_direction = function(degree) {
    var direction, text, textDirection;
    direction = Math.floor((degree / 22.5) + 0.5);
    text = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
    return textDirection = text[modulo(direction, 16)];
  };
  calculate_speed_category = function(speed) {
    var cat;
    return cat = (function() {
      switch (false) {
        case !(speed < 5):
          return '0-4';
        case !(speed < 10):
          return '5-9';
        case !(speed < 15):
          return '10-14';
        case !(speed < 20):
          return '15-19';
        case !(speed < 25):
          return '20-24';
        case !(speed < 30):
          return '25-29';
        case !(speed < 35):
          return '30-34';
        case !(speed < 45):
          return '35-39';
        case !(speed < 50):
          return '40-44';
        case !(speed < 55):
          return '45-49';
        case !(speed < 60):
          return '50-54';
        case !(speed < 65):
          return '55-59';
        case !(speed < 70):
          return '60-64';
        default:
          return '65+';
      }
    })();
  };
  for (j = 0, len = filteredData.length; j < len; j++) {
    d = filteredData[j];
    dir = calculate_direction(d.wd);
    frequency[dir].push(d);
  }
  getSpeeds = function(dir, items) {
    var bits, cat, count, i, k, len1, result, results, speedArray, start;
    speedArray = {
      '0-4': [],
      '5-9': [],
      '10-14': [],
      '15-19': [],
      '20-24': [],
      '25-29': [],
      '30-34': [],
      '35-39': [],
      '40-44': [],
      '45-49': [],
      '50-54': [],
      '55-59': [],
      '60-64': [],
      '65+': []
    };
    for (k = 0, len1 = items.length; k < len1; k++) {
      i = items[k];
      cat = calculate_speed_category(i.wsp);
      speedArray[cat].push(i);
    }
    start = 0;
    count = 0;
    results = [];
    for (cat in speedArray) {
      bits = speedArray[cat];
      result = {
        index: count,
        start: start,
        end: start + bits.length
      };
      start = result.end;
      count++;
      results.push(result);
    }
    return results;
  };
  groupedData = [];
  angle = 0;
  for (dir in frequency) {
    items = frequency[dir];
    groupedData.push({
      key: angle,
      value: dir,
      count: items.length,
      speeds: getSpeeds(dir, items)
    });
    angle += 22.5;
  }
  scale = d3.scale.linear().domain([
    0, 1.1 * d3.max(groupedData, function(d) {
      return d.count;
    })
  ]).range([0, layout.canvas.width / 2]);
  diameter = (scale(scale.domain()[1])) - 5;
  circlecontainer = inner.append('g').attr('class', 'circlecontainer');
  circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter - 120);
  circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter - 80);
  circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter - 40).text(diameter - 40);
  circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter);
  axis = inner.selectAll('.axis').data([
    {
      key: 0,
      value: 'N'
    }, {
      key: 45,
      value: 'NE'
    }, {
      key: 90,
      value: 'E'
    }, {
      key: 135,
      value: 'SE'
    }, {
      key: 180,
      value: 'S'
    }, {
      key: 225,
      value: 'SW'
    }, {
      key: 270,
      value: 'W'
    }, {
      key: 315,
      value: 'NW'
    }
  ]).enter().append('g').attr('class', 'axis').attr('transform', function(d) {
    return "rotate(" + d.key + ")";
  });
  arc = function(o) {
    return d3.svg.arc().startAngle(function(d) {
      return (-o.width / 2) * Math.PI / 180;
    }).endAngle(function(d) {
      return (+o.width / 2) * Math.PI / 180;
    }).innerRadius(o.from).outerRadius(o.to);
  };
  axis.append('line').attr('class', 'spoke').attr('x1', scale(0)).attr('y1', scale(0)).attr('x2', scale(0)).attr('y2', layout.canvas.width / 2);
  axis.append('g').attr('transform', function(d) {
    return "translate(" + (scale(0)) + "," + (layout.canvas.height * (-0.53)) + ")";
  }).append('text').attr('transform', function(d) {
    return "rotate(" + (-d.key) + ")";
  }).attr('style', 'text-anchor: middle').attr('dy', '0.25em').text(function(d) {
    return d.value;
  });
  segment = inner.selectAll('.segment').data(groupedData).enter().append('g').attr('class', 'segment').attr('transform', function(d) {
    return "rotate(" + d.key + ")";
  }).selectAll('path').data(function(d) {
    return d.speeds;
  }).enter().append('path').attr('d', arc({
    width: 360 / 24 * 0.8,
    from: function(d) {
      return scale(d.start);
    },
    to: function(d) {
      return scale(d.end);
    }
  })).style('fill', function(d) {
    return colorScale(d.index);
  });
  circlecontainer.append('text').text(0).attr('x', 0).attr('y', 0);
  circlecontainer.append('text').text(diameter - 120).attr('x', 0).attr('y', -(diameter - 120));
  circlecontainer.append('text').text(diameter - 80).attr('x', 0).attr('y', -(diameter - 80));
  circlecontainer.append('text').text(diameter - 40).attr('x', 0).attr('y', -(diameter - 40));
  return circlecontainer.append('text').text(diameter).attr('x', 0).attr('y', -diameter);
};
