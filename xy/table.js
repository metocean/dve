// Generated by CoffeeScript 1.9.3

/*

Plot an xy table with heatmap.

TODO: Work out how to position these xy visualisations.
TODO: Allow the different categories and values to be specified.
 */
var calculate_layout, colorbrewer, d3,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

d3 = require('d3');

colorbrewer = require('colorbrewer');

calculate_layout = function(dimensions, field, rowData) {
  var container, inner, innerMargin;
  innerMargin = {
    top: 60,
    right: 0,
    bottom: 0,
    left: 70
  };
  container = {
    width: Math.min(dimensions[0], rowData[0].length * field.width + innerMargin.left + innerMargin.right),
    height: field.height * (rowData.length + 2)
  };
  inner = {
    top: innerMargin.top,
    right: container.width - innerMargin.right,
    bottom: container.height - innerMargin.right,
    left: innerMargin.left
  };
  inner.width = inner.right - inner.left;
  inner.height = inner.bottom - inner.top;
  return {
    container: container,
    inner: inner,
    innerMargin: innerMargin
  };
};

module.exports = function(spec, components) {
  var result;
  return result = {
    render: function(dom, state, params) {
      var cat, cells, cellsEnter, col, colorScale, container, d, data, dir, field, globalMax, globalMin, i, inner, j, k, l, layout, len, len1, len2, m, makeRows, n, nCols, nRows, ref, row, rowData, rowsGrp, sideheader, sideheaderGrp, svg, textcolorScale, topheader, topheaderGrp, v, value, x;
      console.log('params', params);
      cat = (function() {
        var l, len, ref, results;
        ref = state.data;
        results = [];
        for (l = 0, len = ref.length; l < len; l++) {
          d = ref[l];
          results.push(d[spec.category]);
        }
        return results;
      })();
      dir = {};
      ref = spec.columns;
      for (l = 0, len = ref.length; l < len; l++) {
        col = ref[l];
        dir[col] = (function() {
          var len1, m, ref1, results;
          ref1 = state.data;
          results = [];
          for (m = 0, len1 = ref1.length; m < len1; m++) {
            d = ref1[m];
            results.push(d[col]);
          }
          return results;
        })();
      }
      data = {
        cat: cat,
        dir: dir
      };
      globalMin = d3.min((function() {
        var ref1, results;
        ref1 = data.dir;
        results = [];
        for (k in ref1) {
          v = ref1[k];
          results.push(d3.min((function() {
            var len1, m, results1;
            results1 = [];
            for (m = 0, len1 = v.length; m < len1; m++) {
              x = v[m];
              results1.push(+x);
            }
            return results1;
          })()));
        }
        return results;
      })());
      globalMax = d3.max((function() {
        var ref1, results;
        ref1 = data.dir;
        results = [];
        for (k in ref1) {
          v = ref1[k];
          results.push(d3.max((function() {
            var len1, m, results1;
            results1 = [];
            for (m = 0, len1 = v.length; m < len1; m++) {
              x = v[m];
              results1.push(+x);
            }
            return results1;
          })()));
        }
        return results;
      })());
      makeRows = function(data) {
        var dirkeys, index, len1, m, ref1, results;
        dirkeys = Object.keys(data.dir);
        ref1 = data.cat;
        results = [];
        for (index = m = 0, len1 = ref1.length; m < len1; index = ++m) {
          cat = ref1[index];
          results.push(dirkeys.map(function(dir) {
            return data.dir[dir][index];
          }));
        }
        return results;
      };
      rowData = makeRows(data);
      nRows = rowData.length;
      nCols = spec.columns.length;
      console.log('nCols', nCols);
      (function() {
        var finalNonZeroRow, finalRow, i, ref1, row, zeroRows;
        zeroRows = (function() {
          var len1, m, results;
          results = [];
          for (i = m = 0, len1 = rowData.length; m < len1; i = ++m) {
            row = rowData[i];
            if (row.every(function(c) {
              return +c === 0;
            })) {
              results.push(i);
            }
          }
          return results;
        })();
        if (zeroRows.length === 0) {
          return;
        }
        finalNonZeroRow = nRows - 1;
        while (indexOf.call(zeroRows, finalNonZeroRow) >= 0) {
          finalNonZeroRow -= 1;
        }
        finalRow = finalNonZeroRow + 1;
        if (finalRow >= nRows) {
          return;
        }
        data.cat = data.cat.slice(0, finalRow + 1);
        ref1 = data.dir;
        for (k in ref1) {
          v = ref1[k];
          v = v.slice(0, finalRow + 1);
        }
        return rowData = makeRows(data);
      })();
      console.log('Params', params);
      if (params.roundToInt === true) {
        for (i = m = 0, len1 = rowData.length; m < len1; i = ++m) {
          row = rowData[i];
          for (j = n = 0, len2 = row.length; n < len2; j = ++n) {
            value = row[j];
            value = parseInt(value, 10).toString();
            rowData[i][j] = value;
          }
        }
      }
      field = {
        height: 30,
        width: 55
      };
      layout = calculate_layout(params.dimensions, field, rowData);
      svg = d3.select(dom).append('svg').attr('class', 'item table');
      svg.attr('width', layout.container.width).attr('height', layout.container.height);
      inner = svg.append('g').attr('class', 'inner').attr('transform', "translate(" + layout.inner.left + "," + layout.inner.top + ")");
      inner.append('text').attr('x', layout.inner.width / 2).attr('y', -1 * layout.innerMargin.top).attr('dy', '1em').style('text-anchor', 'middle').text(spec.columnLabel);
      inner.append('text').attr('text-anchor', 'middle').attr('x', -1 * layout.inner.height / 2).attr('y', -1 * layout.innerMargin.left).attr('dy', '1em').attr('transform', 'rotate(-90)').text(spec.categoryLabel);
      container = inner.append('g').attr('class', 'container');
      rowsGrp = container.append('g').attr('class', 'rowsGrp').attr('transform', "translate(" + (field.width * 0.5) + ", 0)");
      colorScale = d3.scale.quantize().range(colorbrewer.Blues[9]).domain([globalMin, globalMax]);
      textcolorScale = d3.scale.quantize().range(["#000000", "#000000", "#000000", "#ffffff", "#ffffff"]).domain([globalMin, globalMax]);
      topheaderGrp = container.append('g').attr('class', 'topheaderGrp');
      topheader = topheaderGrp.selectAll('g').data(d3.keys(data.dir)).enter().append('g').attr('class', 'header top').attr('transform', function(d, i) {
        return "translate(" + (i * field.width) + ", " + (-1 * field.height) + ")";
      });
      topheader.append('rect').attr('width', field.width - 1).attr('height', field.height);
      topheader.append('text').attr('x', field.width / 2).attr('y', field.height / 2).attr('dy', '0.35em').text(String);
      sideheaderGrp = container.append('g').attr('class', 'sideheaderGrp');
      sideheader = sideheaderGrp.selectAll('g').data(data.cat, function(d) {
        return d3.values(d);
      }).enter().append('g').attr('class', 'header side').attr('transform', function(d, i) {
        return "translate(" + (-1 * field.width) + ", " + (i * field.height) + ")";
      });
      sideheader.append('rect').attr('width', field.width - 1).attr('height', field.height);
      sideheader.append('text').attr('x', field.width / 2).attr('y', field.height / 2).attr('dy', '0.35em').text(String);
      row = rowsGrp.selectAll('g.row').data(rowData);
      row.enter().append('g').attr('class', 'row').attr('transform', function(d, i) {
        return "translate(0, " + (i * field.height) + ")";
      });
      cells = row.selectAll('g.cell').data(function(d) {
        return d;
      });
      cellsEnter = cells.enter().append('g').attr('class', 'cell').attr('transform', function(d, i) {
        return "translate(" + (i * field.width - field.width / 2) + ", 0)";
      });
      cellsEnter.append('rect').attr('width', field.width - 1).attr('height', field.height - 1).style('fill', colorScale);
      return cellsEnter.append('text').attr('x', field.width / 2).attr('y', field.height / 2).attr('dy', '0.35em').text(String).style('fill', textcolorScale);
    }
  };
};
