// Generated by CoffeeScript 1.9.1
var ERtable,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERtable = (function() {
  function ERtable(svg, data, dimensions, options, domain) {
    this.calculate_layout = bind(this.calculate_layout, this);
    var cat, cells, cellsEnter, colorScale, dirkeys, index, j, len, ref, row, sideheader, textcolorScale, topheader;
    this.svg = svg;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.svg.append('g').attr('class', 'title').append('text').attr('class', 'infotext').text(this.options.text).attr('dy', 20).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('line').attr('class', 'divider').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.field = {
      height: 30,
      width: 70
    };
    this.container = this.inner.append('g').attr('class', 'container').attr('transform', "translate(10, 10)");
    this.topheaderGrp = this.container.append('g').attr('class', 'topheaderGrp');
    this.sideheaderGrp = this.container.append('g').attr('class', 'sideheaderGrp');
    this.rowsGrp = this.container.append('g').attr('class', 'rowsGrp').attr('transform', "translate(" + (this.field.width * 0.75) + ", " + (this.field.height * 0.85) + ")");
    this.data = {
      dir: {
        N: [0.90, 2.74, 3.12, 1.98, 0.93, 0.42, 0.16, 0.03, 0.00, 0.00, 0.00, 0.00, 0.00],
        NE: [0.89, 3.14, 5.51, 4.38, 1.68, 0.48, 0.09, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00],
        E: [0.80, 2.43, 4.07, 3.84, 2.08, 0.70, 0.13, 0.02, 0.01, 0.00, 0.00, 0.00, 0.00],
        SE: [0.71, 1.53, 1.63, 0.95, 0.46, 0.13, 0.04, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00],
        S: [0.67, 1.45, 1.73, 1.30, 0.70, 0.39, 0.16, 0.05, 0.01, 0.00, 0.00, 0.00, 0.00],
        SW: [0.72, 2.35, 3.67, 4.05, 3.23, 2.18, 1.17, 0.47, 0.17, 0.05, 0.01, 0.00, 0.00],
        W: [0.91, 2.72, 4.00, 4.08, 2.94, 1.77, 0.85, 0.31, 0.10, 0.02, 0.00, 0.00, 0.00],
        NW: [0.83, 2.61, 3.17, 2.56, 1.45, 0.72, 0.30, 0.11, 0.02, 0.01, 0.00, 0.00, 0.00]
      },
      cat: ['0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45', '45-50', '50-55', '55-60', '60-65']
    };
    this.rowData = [];
    dirkeys = Object.keys(this.data.dir);
    ref = this.data.cat;
    for (index = j = 0, len = ref.length; j < len; index = ++j) {
      cat = ref[index];
      this.rowData.push(dirkeys.map((function(_this) {
        return function(dir) {
          return _this.data.dir[dir][index];
        };
      })(this)));
    }
    colorScale = d3.scale.quantize().range(colorbrewer.Blues[9]).domain([-0.75, 9]);
    textcolorScale = d3.scale.quantize().range(["#000000", "#000000", "#000000", "#ffffff", "#ffffff"]).domain([-0.75, 9]);
    topheader = this.topheaderGrp.selectAll('g').data(d3.keys(this.data.dir)).enter().append('g').attr('class', 'header top').attr('transform', (function(_this) {
      return function(d, i) {
        return "translate(" + ((i + 0.65) * _this.field.width) + ",0)";
      };
    })(this));
    topheader.append('rect').attr('width', this.field.width - 1).attr('height', this.field.height);
    topheader.append('text').attr('x', this.field.width / 2).attr('y', this.field.height / 2).attr('dy', '0.35em').text(String);
    sideheader = this.sideheaderGrp.selectAll('g').data(this.data.cat, function(d) {
      return d3.values(d);
    }).enter().append('g').attr('class', 'header side').attr('transform', (function(_this) {
      return function(d, i) {
        return "translate(0, " + ((i + 0.75) * _this.field.height) + ")";
      };
    })(this));
    sideheader.append('rect').attr('width', this.field.width - 1).attr('height', this.field.height);
    sideheader.append('text').attr('x', this.field.width / 2).attr('y', this.field.height / 2).attr('dy', '0.35em').text(String);
    row = this.rowsGrp.selectAll('g.row').data(this.rowData);
    row.enter().append('g').attr('class', 'row').attr('transform', (function(_this) {
      return function(d, i) {
        return "translate(0, " + (i * _this.field.height) + ")";
      };
    })(this));
    cells = row.selectAll('g.cell').data(function(d) {
      return d;
    });
    cellsEnter = cells.enter().append('g').attr('class', 'cell').attr('transform', (function(_this) {
      return function(d, i) {
        return "translate(" + (i * _this.field.width) + ", 0)";
      };
    })(this));
    cellsEnter.append('rect').attr('width', this.field.width - 1).attr('height', this.field.height - 1).style('fill', function(d) {
      return colorScale(d);
    });
    cellsEnter.append('text').attr('x', this.field.width / 2).attr('y', this.field.height / 2).attr('dy', '0.35em').text(String).style('fill', (function(_this) {
      return function(d) {
        return textcolorScale(d);
      };
    })(this));
  }

  ERtable.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: dimensions[0],
      height: 450
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 13,
      left: 200
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  return ERtable;

})();
