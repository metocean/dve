// Generated by CoffeeScript 1.9.1
var debounce, hub, hub_listeners, neighbours, old_moment_duration,
  slice = [].slice;

old_moment_duration = moment.duration;

moment.duration = function() {
  var ord, unit;
  if (arguments.length !== 1 || typeof arguments[0] !== 'string') {
    return old_moment_duration.apply(null, arguments);
  }
  unit = arguments[0].slice(-1);
  ord = arguments[0].slice(0, -1);
  return old_moment_duration(parseFloat(ord), unit);
};

moment.cycle = function(cycle) {
  return {
    expand: function(domain) {
      var current, index, results;
      index = 0;
      current = domain[0].clone();
      if (cycle.offset != null) {
        current.add(cycle.offset);
      }
      results = [];
      while (current.isBefore(domain[1])) {
        results.push({
          index: index,
          start: current.clone(),
          end: current.clone().add(cycle.duration)
        });
        current.add(cycle.every);
        index++;
      }
      return results;
    }
  };
};

window.getDimensions = function() {
  var body, documentElement;
  documentElement = document.documentElement;
  body = document.getElementsByTagName('body')[0];
  return [parseInt(window.innerWidth || documentElement.clientWidth || body.clientWidth), -2 + parseInt(window.innerHeight || documentElement.clientHeight || body.clientHeight)];
};

debounce = function(delay, fn) {
  var timeout;
  timeout = null;
  return function() {
    if (timeout > -1) {
      clearTimeout(timeout);
    }
    return timeout = setTimeout(fn, delay);
  };
};

hub_listeners = {};

hub = {
  on: function(id, listener) {
    if (hub_listeners[id] == null) {
      hub_listeners[id] = [];
    }
    return hub_listeners[id].push(listener);
  },
  emit: function() {
    var args, h, i, id, len, ref, results1;
    id = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (hub_listeners[id] == null) {
      return;
    }
    ref = hub_listeners[id];
    results1 = [];
    for (i = 0, len = ref.length; i < len; i++) {
      h = ref[i];
      results1.push(h.apply(null, args));
    }
    return results1;
  }
};

neighbours = function(data, f) {
  return function(value) {
    var d, fd, i, last, len;
    value = +value;
    if (data.length === 0 || +f(data[0]) > value || +f(data[data.length - 1]) < value) {
      return [];
    }
    last = null;
    for (i = 0, len = data.length; i < len; i++) {
      d = data[i];
      fd = +f(d);
      if (fd === value) {
        return [d];
      }
      if (value < fd) {
        return [last, d];
      }
      last = d;
    }
  };
};
