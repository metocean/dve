// Generated by CoffeeScript 1.9.1
var ERwindrose,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

ERwindrose = (function() {
  function ERwindrose(svg, data, dimensions, options, domain) {
    this.calculate_layout = bind(this.calculate_layout, this);
    this.calculate_speed_category = bind(this.calculate_speed_category, this);
    this.calculate_direction = bind(this.calculate_direction, this);
    var angle, arc, circlecontainer, d, diameter, dir, frequency, getSpeeds, items, j, len, ref, segment;
    this.svg = svg;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.data = data.map(function(d) {
      var result;
      result = {
        time: d.time,
        wsp: +d.wsp,
        wd: +d.wd
      };
      return result;
    });
    this.data = this.data.filter((function(_this) {
      return function(d) {
        if ((d.wd != null) && (d.wsp != null)) {
          return d;
        }
      };
    })(this));
    this.filteredData = this.data.filter((function(_this) {
      return function(d) {
        return +d.time >= +_this.domain[0] && +d.time <= +_this.domain[1];
      };
    })(this));
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.svg.append('g').attr('class', 'title').attr('transform', "translate(" + this.title.left + "," + this.title.top + ")").append('text').attr('class', 'infotext').text(this.options.text).attr('dy', 18).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + (this.canvas.left + this.canvas.width / 2) + "," + (this.canvas.top + this.canvas.height / 2) + ")");
    frequency = {
      N: [],
      NNE: [],
      NE: [],
      ENE: [],
      E: [],
      ESE: [],
      SE: [],
      SSE: [],
      S: [],
      SSW: [],
      SW: [],
      WSW: [],
      W: [],
      WNW: [],
      NW: [],
      NNW: []
    };
    this.colorScale = d3.scale.quantize().range(['#E4EAF1', '#D1D8E3', '#BEC7D5', '#ABB6C7', '#98A5B9', '#8594AB', '#73829E', '#607190', '#4D6082', '#3A4E74', '#273D66', '#142C58', '#122851', '#102448']).domain([0, 13]);
    this.textcolorScale = d3.scale.quantize().range(['#000000', '#000000', '#ffffff', '#ffffff']).domain([0, 13]);
    ref = this.filteredData;
    for (j = 0, len = ref.length; j < len; j++) {
      d = ref[j];
      dir = this.calculate_direction(d.wd);
      frequency[dir].push(d);
    }
    getSpeeds = (function(_this) {
      return function(dir, items) {
        var bits, cat, count, i, k, len1, result, results, speedArray, start;
        speedArray = {
          '0-4': [],
          '5-9': [],
          '10-14': [],
          '15-19': [],
          '20-24': [],
          '25-29': [],
          '30-34': [],
          '35-39': [],
          '40-44': [],
          '45-49': [],
          '50-54': [],
          '55-59': [],
          '60-64': [],
          '65+': []
        };
        for (k = 0, len1 = items.length; k < len1; k++) {
          i = items[k];
          cat = _this.calculate_speed_category(i.wsp);
          speedArray[cat].push(i);
        }
        start = 0;
        count = 0;
        results = [];
        for (cat in speedArray) {
          bits = speedArray[cat];
          result = {
            index: count,
            start: start,
            end: start + bits.length
          };
          start = result.end;
          count++;
          results.push(result);
        }
        return results;
      };
    })(this);
    this.groupedData = [];
    angle = 0;
    for (dir in frequency) {
      items = frequency[dir];
      this.groupedData.push({
        key: angle,
        value: dir,
        count: items.length,
        speeds: getSpeeds(dir, items)
      });
      angle += 22.5;
    }
    this.scale = d3.scale.linear().domain([
      0, 1.1 * d3.max(this.groupedData, function(d) {
        return d.count;
      })
    ]).range([0, this.canvas.width / 2]);
    diameter = (this.scale(this.scale.domain()[1])) - 5;
    circlecontainer = this.inner.append('g').attr('class', 'circlecontainer');
    circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter - 120);
    circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter - 80);
    circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter - 40).text(diameter - 40);
    circlecontainer.append('circle').attr('cx', 0).attr('cy', 0).attr('r', diameter);
    this.axis = this.inner.selectAll('.axis').data([
      {
        key: 0,
        value: 'N'
      }, {
        key: 45,
        value: 'NE'
      }, {
        key: 90,
        value: 'E'
      }, {
        key: 135,
        value: 'SE'
      }, {
        key: 180,
        value: 'S'
      }, {
        key: 225,
        value: 'SW'
      }, {
        key: 270,
        value: 'W'
      }, {
        key: 315,
        value: 'NW'
      }
    ]).enter().append('g').attr('class', 'axis').attr('transform', (function(_this) {
      return function(d) {
        return "rotate(" + d.key + ")";
      };
    })(this));
    arc = function(o) {
      return d3.svg.arc().startAngle((function(_this) {
        return function(d) {
          return (-o.width / 2) * Math.PI / 180;
        };
      })(this)).endAngle((function(_this) {
        return function(d) {
          return (+o.width / 2) * Math.PI / 180;
        };
      })(this)).innerRadius(o.from).outerRadius(o.to);
    };
    this.axis.append('line').attr('class', 'spoke').attr('x1', this.scale(0)).attr('y1', this.scale(0)).attr('x2', this.scale(0)).attr('y2', this.canvas.width / 2);
    this.axis.append('g').attr('transform', (function(_this) {
      return function(d) {
        return "translate(" + (_this.scale(0)) + "," + (_this.canvas.height * (-0.53)) + ")";
      };
    })(this)).append('text').attr('transform', (function(_this) {
      return function(d) {
        return "rotate(" + (-d.key) + ")";
      };
    })(this)).attr('style', 'text-anchor: middle').attr('dy', '0.25em').text((function(_this) {
      return function(d) {
        return d.value;
      };
    })(this));
    segment = this.inner.selectAll('.segment').data(this.groupedData).enter().append('g').attr('class', 'segment').attr('transform', (function(_this) {
      return function(d) {
        return "rotate(" + d.key + ")";
      };
    })(this)).selectAll('path').data(function(d) {
      return d.speeds;
    }).enter().append('path').attr('d', arc({
      width: 360 / 24 * 0.8,
      from: (function(_this) {
        return function(d) {
          return _this.scale(d.start);
        };
      })(this),
      to: (function(_this) {
        return function(d) {
          return _this.scale(d.end);
        };
      })(this)
    })).style('fill', (function(_this) {
      return function(d) {
        return _this.colorScale(d.index);
      };
    })(this));
    circlecontainer.append('text').text(0).attr('x', 0).attr('y', 0);
    circlecontainer.append('text').text(diameter - 120).attr('x', 0).attr('y', -(diameter - 120));
    circlecontainer.append('text').text(diameter - 80).attr('x', 0).attr('y', -(diameter - 80));
    circlecontainer.append('text').text(diameter - 40).attr('x', 0).attr('y', -(diameter - 40));
    circlecontainer.append('text').text(diameter).attr('x', 0).attr('y', -diameter);
  }

  ERwindrose.prototype.calculate_direction = function(degree) {
    var direction, text, textDirection;
    direction = Math.floor((degree / 22.5) + 0.5);
    text = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
    return textDirection = text[modulo(direction, 16)];
  };

  ERwindrose.prototype.calculate_speed_category = function(speed) {
    var cat;
    return cat = (function() {
      switch (false) {
        case !(speed < 5):
          return '0-4';
        case !(speed < 10):
          return '5-9';
        case !(speed < 15):
          return '10-14';
        case !(speed < 20):
          return '15-19';
        case !(speed < 25):
          return '20-24';
        case !(speed < 30):
          return '25-29';
        case !(speed < 35):
          return '30-34';
        case !(speed < 45):
          return '35-39';
        case !(speed < 50):
          return '40-44';
        case !(speed < 55):
          return '45-49';
        case !(speed < 60):
          return '50-54';
        case !(speed < 65):
          return '55-59';
        case !(speed < 70):
          return '60-64';
        default:
          return '65+';
      }
    })();
  };

  ERwindrose.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: 600,
      height: 400
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 200
    };
    this.title = {
      top: 0,
      right: this.dimensions.width - this.info.left,
      bottom: 0,
      left: 0,
      height: this.dimensions.height,
      width: this.info.left
    };
    return this.canvas = {
      top: this.info.top + 25,
      right: this.info.right - 50,
      bottom: this.info.bottom - 50,
      left: this.info.left + 25,
      width: this.dimensions.width - this.info.left - this.info.right - 50,
      height: this.dimensions.height - this.info.top - this.info.bottom - 50
    };
  };

  return ERwindrose;

})();
