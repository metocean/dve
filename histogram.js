// Generated by CoffeeScript 1.9.1
var ERhistogram,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

ERhistogram = (function() {
  function ERhistogram(svg, data, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.calculate_speed_category = bind(this.calculate_speed_category, this);
    this.calculate_direction = bind(this.calculate_direction, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    this.getMaxObj = bind(this.getMaxObj, this);
    var _speedArray, angle, cat, clipId, d, dir, filteredData, frequency, getSpeeds, i, item, items, j, k, len, len1, max, maxItem, ref, ref1;
    this.svg = svg;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.data = data.map(function(d) {
      var result;
      result = {
        time: d.time,
        wsp: +d.wsp,
        wd: +d.wd
      };
      return result;
    });
    this.data = this.data.filter((function(_this) {
      return function(d) {
        if ((d.wd != null) && (d.wsp != null)) {
          return d;
        }
      };
    })(this));
    filteredData = this.data.filter((function(_this) {
      return function(d) {
        return +d.time >= +_this.domain[0] && +d.time <= +_this.domain[1];
      };
    })(this));
    this.svg.append('g').attr('class', 'title').attr('transform', "translate(" + this.title.left + "," + this.title.top + ")").append('text').attr('class', 'infotext').text("" + this.options.text).attr('dy', 20).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('line').attr('class', 'divider').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.inner.append('g').attr('class', 'x axis').attr('transform', "translate(0," + this.canvas.height + ")");
    this.inner.append('g').attr('class', 'y axis');
    clipId = "clip-" + (Math.floor(Math.random() * 1000000));
    this.chart = this.inner.append('g').attr('class', 'chart');
    this.chart.append('defs').append('rect').attr('x', '0').attr('y', '0').attr('width', this.canvas.width).attr('height', this.canvas.height);
    frequency = {
      N: [],
      NNE: [],
      NE: [],
      ENE: [],
      E: [],
      ESE: [],
      SE: [],
      SSE: [],
      S: [],
      SSW: [],
      SW: [],
      WSW: [],
      W: [],
      WNW: [],
      NW: [],
      NNW: []
    };
    this.colorScale = d3.scale.quantize().range(['#E4EAF1', '#D1D8E3', '#BEC7D5', '#ABB6C7', '#98A5B9', '#8594AB', '#73829E', '#607190', '#4D6082', '#3A4E74', '#273D66', '#142C58', '#122851', '#102448']).domain([0, 13]);
    this.textcolorScale = d3.scale.quantize().range(['#000000', '#000000', '#ffffff', '#ffffff']).domain([0, 13]);
    for (j = 0, len = filteredData.length; j < len; j++) {
      d = filteredData[j];
      dir = this.calculate_direction(d.wd);
      frequency[dir].push(d);
    }
    _speedArray = {
      '0-4': [],
      '5-9': [],
      '10-14': [],
      '15-19': [],
      '20-24': [],
      '25-29': [],
      '30-34': [],
      '35-39': [],
      '40-44': [],
      '45-49': [],
      '50-54': [],
      '55-59': [],
      '60-64': [],
      '65+': []
    };
    getSpeeds = (function(_this) {
      return function(dir, items) {
        var _, bits, cat, count, i, k, len1, result, results, speedArray, start;
        speedArray = {};
        for (cat in _speedArray) {
          _ = _speedArray[cat];
          speedArray[cat] = [];
        }
        for (k = 0, len1 = items.length; k < len1; k++) {
          i = items[k];
          cat = _this.calculate_speed_category(i.wsp);
          speedArray[cat].push(i);
        }
        start = 0;
        count = 0;
        results = [];
        for (cat in speedArray) {
          bits = speedArray[cat];
          result = {
            index: count,
            start: start,
            end: start + bits.length,
            value: bits.length
          };
          start = result.end;
          count++;
          results.push(result);
        }
        return results;
      };
    })(this);
    this.groupedData = [];
    angle = 0;
    for (dir in frequency) {
      items = frequency[dir];
      this.groupedData.push({
        key: angle,
        value: dir,
        count: items.length,
        speeds: getSpeeds(dir, items)
      });
      angle += 22.5;
    }
    ref = Object.keys(_speedArray);
    for (i in ref) {
      cat = ref[i];
      max = null;
      maxItem = null;
      ref1 = this.groupedData;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        dir = ref1[k];
        item = dir.speeds[i];
        if (item.value !== 0) {
          if (maxItem === null || item.value > max) {
            max = item.value;
            maxItem = item;
          }
        }
      }
      if (maxItem != null) {
        maxItem.legend = cat;
      }
    }
    this.scale = {
      x: d3.scale.ordinal().domain(this.groupedData.map(function(d) {
        return d.value;
      })),
      y: d3.scale.linear().domain([
        0, 1.1 * d3.max(this.groupedData, function(d) {
          return d.count;
        })
      ])
    };
    this.axis = {
      x: d3.svg.axis().scale(this.scale.x).orient("bottom"),
      y: d3.svg.axis().scale(this.scale.y).orient("left")
    };
    this.chart.append('text').attr('class', 'legend').attr('text-anchor', 'end');
    this.options.hub.on('window dimensions changed', this.resize);
    this.resize(dimensions);
  }

  ERhistogram.prototype.getMaxObj = function() {
    var d, j, len, ref;
    ref = this.groupedData;
    for (j = 0, len = ref.length; j < len; j++) {
      d = ref[j];
      if (d.count === (d3.max(this.groupedData, function(d) {
        return d.count;
      }))) {
        return d;
      }
    }
  };

  ERhistogram.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: dimensions[0] / 1.5,
      height: 400
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 20,
      left: 200
    };
    this.title = {
      top: 0,
      right: this.dimensions.width - this.info.left,
      bottom: 0,
      left: 0,
      height: this.dimensions.height,
      width: this.info.left
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  ERhistogram.prototype.calculate_direction = function(degree) {
    var direction, text, textDirection;
    direction = Math.floor((degree / 22.5) + 0.5);
    text = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
    return textDirection = text[modulo(direction, 16)];
  };

  ERhistogram.prototype.calculate_speed_category = function(speed) {
    var cat;
    return cat = (function() {
      switch (false) {
        case !(speed < 5):
          return '0-4';
        case !(speed < 10):
          return '5-9';
        case !(speed < 15):
          return '10-14';
        case !(speed < 20):
          return '15-19';
        case !(speed < 25):
          return '20-24';
        case !(speed < 30):
          return '25-29';
        case !(speed < 35):
          return '30-34';
        case !(speed < 45):
          return '35-39';
        case !(speed < 50):
          return '40-44';
        case !(speed < 55):
          return '45-49';
        case !(speed < 60):
          return '50-54';
        case !(speed < 65):
          return '55-59';
        case !(speed < 70):
          return '60-64';
        default:
          return '65+';
      }
    })();
  };

  ERhistogram.prototype.resize = function(dimensions) {
    var bars, max;
    this.calculate_layout(dimensions);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.scale.x.rangeRoundBands([0, this.canvas.width], 0.05);
    this.scale.y.range([this.canvas.height, 0]);
    bars = this.chart.selectAll('.bar').data(this.groupedData).enter().append('g').attr('class', 'bar').attr('transform', (function(_this) {
      return function(d) {
        return "translate(" + (_this.scale.x(d.value)) + ", 0)";
      };
    })(this));
    bars.selectAll('rect').data(function(d) {
      return d.speeds;
    }).enter().append('rect').attr('x', 0).attr('y', (function(_this) {
      return function(d) {
        return _this.scale.y(d.end);
      };
    })(this)).attr("width", this.scale.x.rangeBand()).attr('height', (function(_this) {
      return function(d) {
        return _this.scale.y(d.start) - _this.scale.y(d.end);
      };
    })(this)).style('fill', (function(_this) {
      return function(d) {
        return _this.colorScale(d.index);
      };
    })(this));
    bars.selectAll('text').data(function(d) {
      return d.speeds.filter(function(s) {
        return s.legend;
      });
    }).enter().append('text').attr('x', this.scale.x.rangeBand() / 2).attr('y', (function(_this) {
      return function(d) {
        return _this.scale.y(d.end);
      };
    })(this)).attr('dy', '1.1em').style('text-anchor', 'middle').style('fill', (function(_this) {
      return function(d) {
        return _this.textcolorScale(d.index);
      };
    })(this)).text(function(d) {
      return d.legend;
    });
    this.inner.select('.x.axis').call(this.axis.x);
    this.inner.select('.y.axis').call(this.axis.y.tickSize(-this.canvas.width, 0, 0));
    this.inner.selectAll('.y.axis .tick line').data(this.scale.y.ticks(this.axis.y.ticks()[0])).attr('class', function(d) {
      if (d === 0) {
        return 'zero';
      } else {
        return null;
      }
    });
    this.inner.select('.y.axis .domain').remove();
    max = this.getMaxObj();
    return this.chart.select('.legend').attr('x', this.scale.x(max.value)).attr('y', this.scale.y(max.count)).text(max.count + " SOMETHING?");
  };

  return ERhistogram;

})();
