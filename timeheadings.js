// Generated by CoffeeScript 1.9.1
var ERtimeheadings,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERtimeheadings = (function() {
  function ERtimeheadings(svg, data, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    var drag, getTimezone;
    this.svg = svg;
    this.data = data;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.svg.append('g').attr('class', 'title').attr('transform', "translate(" + this.title.left + "," + this.title.top + ")").append('text').attr('class', 'infotext').attr('dy', 20).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('line').attr('class', 'divider').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.inner.append('g').attr('class', 'axis').attr("transform", "translate(0," + (-this.canvas.top) + ")");
    this.scale = d3.time.scale().domain(this.domain);
    this.axis = d3.svg.axis().scale(this.scale).ticks(d3.time.hour, 6).tickFormat(d3.time.format('%H'));
    this.focus = this.inner.append('g').attr('class', 'focus');
    this.focus.append('line').attr('class', 'poi').attr('display', 'none').attr('y1', 0).attr('y2', this.dimensions.height);
    this.focus.append('text').attr('class', 'poi-y-val-shad').attr('display', 'none').attr('dx', '-1.3em').attr('dy', 2);
    this.focus.append('text').attr('class', 'poi-y-val').attr('display', 'none').attr('dx', '-1.3em');
    getTimezone = moment(this.scale.domain()[0]);
    this.svg.select('.infotext').text(this.options.name + ' (GMT' + getTimezone.format('Z') + ')');
    this.options.hub.on('poi', this.setpoi);
    this.options.hub.on('window dimensions changed', this.resize);
    this.poifsm = {
      hide: (function(_this) {
        return function() {
          if (_this.poi === null) {
            return;
          }
          return _this.options.hub.emit('poi', null);
        };
      })(this),
      show: (function(_this) {
        return function(x) {
          var d, range;
          range = _this.scale.range();
          if (range[0] > x || range[1] < x) {
            return _this.poifsm.hide();
          }
          d = _this.scale.invert(x);
          if (_this.poi === d) {
            return;
          }
          return _this.options.hub.emit('poi', moment(d));
        };
      })(this),
      update: (function(_this) {
        return function() {
          var dist, x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.startx != null) {
            dist = Math.abs(_this.poifsm.startx - x);
            if (dist < 10) {
              return;
            }
          }
          _this.poifsm.startx = null;
          return _this.poifsm.show(x);
        };
      })(this),
      mousedown: (function(_this) {
        return function() {
          var x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.currentx == null) {
            return _this.poifsm.show(x);
          }
          return _this.poifsm.startx = x;
        };
      })(this),
      mouseup: (function(_this) {
        return function() {
          var dist, x;
          if (_this.poifsm.startx == null) {
            return;
          }
          if (!_this.poifsm.currentx) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          dist = Math.abs(_this.poifsm.startx - _this.poifsm.currentx);
          if (dist < 10) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          x = d3.mouse(_this.inner.node())[0];
          return _this.poifsm.show(x);
        };
      })(this)
    };
    drag = d3.behavior.drag().on('drag', this.poifsm.update);
    this.focus.append('rect').attr('class', 'foreground').style('fill', 'none').on('mousedown', this.poifsm.mousedown).on('mouseup', this.poifsm.mouseup).call(drag);
    this.resize(dimensions);
  }

  ERtimeheadings.prototype.calculate_layout = function(dimensions) {
    this.margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    this.dimensions = {
      width: dimensions[0],
      height: 25
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 200
    };
    this.title = {
      top: 0,
      right: this.dimensions.width - this.info.left,
      bottom: 0,
      left: 0,
      height: this.dimensions.height,
      width: this.info.left
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  ERtimeheadings.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  ERtimeheadings.prototype.updatepoi = function() {
    var xVal;
    if (this.poi == null) {
      this.poifsm.currentx = this.scale(this.poi);
      this.focus.select('line.poi').attr('display', 'none');
      this.focus.select('.poi-y-val-shad').attr('display', 'none');
      this.focus.select('.poi-y-val').attr('display', 'none');
      return;
    }
    this.poifsm.currentx = this.scale(this.poi);
    this.focus.select('line.poi').attr('display', null).attr('x1', this.scale(this.poi)).attr('x2', this.scale(this.poi));
    if ((this.canvas.width - this.scale(this.poi)) < 20) {
      xVal = this.canvas.width - 20;
    } else if ((this.canvas.left + this.scale(this.poi)) < 225) {
      xVal = 25;
    } else {
      xVal = this.scale(this.poi);
    }
    this.focus.select('.poi-y-val-shad').attr('display', null).attr('transform', "translate(" + xVal + "," + (this.canvas.height - 6) + ")").text(this.poi.format('HH:mm'));
    return this.focus.select('.poi-y-val').attr('display', null).attr('transform', "translate(" + xVal + "," + (this.canvas.height - 6) + ")").text(this.poi.format('HH:mm'));
  };

  ERtimeheadings.prototype.resize = function(dimensions) {
    this.calculate_layout(dimensions);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.scale.range([0, this.canvas.width]);
    this.inner.select('.axis').call(this.axis.tickSize(this.canvas.height / 4, -this.canvas.height));
    this.focus.select('.foreground').attr('height', this.canvas.height).attr('width', this.canvas.width);
    this.inner.select('.axis .domain').remove();
    return this.updatepoi();
  };

  return ERtimeheadings;

})();
