// Generated by CoffeeScript 1.9.1
var SRscatter,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SRscatter = (function() {
  function SRscatter(options, params) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.drawDots = bind(this.drawDots, this);
    this.provideMax = bind(this.provideMax, this);
    var end, getNeighbours, start;
    this.options = options;
    this.svg = params.svg, this.data = params.data, this.scale = params.scale, this.axis = params.axis, this.dimensions = params.dimensions, this.hub = params.hub, this.domain = params.domain;
    this.data = this.data.map(function(d) {
      var result;
      result = {
        time: d.time
      };
      result[options.field] = +d[options.field];
      return result;
    });
    this.data = this.data.filter((function(_this) {
      return function(d) {
        return d[_this.options.field] != null;
      };
    })(this));
    getNeighbours = neighbours(this.data, function(d) {
      return d.time;
    });
    start = getNeighbours(this.domain[0])[0];
    end = getNeighbours(this.domain[1]);
    end = end[end.length - 1];
    this.filteredData = this.data.filter((function(_this) {
      return function(d) {
        return +d.time >= +start.time && +d.time <= +end.time;
      };
    })(this));
    this.value = {
      x: (function(_this) {
        return function(d) {
          return d.time;
        };
      })(this),
      y: (function(_this) {
        return function(d) {
          return d[options.field];
        };
      })(this)
    };
    this.dotContainer = this.svg.append('g');
    this.dotContainer.selectAll(".dot").data(this.filteredData).enter().append("circle").attr("class", "dot").attr("r", 3.5);
    this.focus = this.svg.append('g').attr('class', 'focus');
    this.focus.append('text').attr('class', 'poi-y-val-shad').attr('display', 'none').attr('dy', '-0.3em');
    this.focus.append('text').attr('class', 'poi-y-val').attr('display', 'none').attr('dy', '-0.3em');
    this.hub.on('poi', this.setpoi);
  }

  SRscatter.prototype.provideMax = function() {
    return d3.max(this.filteredData, (function(_this) {
      return function(d) {
        return d[_this.options.field];
      };
    })(this));
  };

  SRscatter.prototype.drawDots = function(svg, data) {
    return svg.selectAll(".dot").data(data).attr("cx", (function(_this) {
      return function(d) {
        return _this.scale.x(_this.value.x(d));
      };
    })(this)).attr("cy", (function(_this) {
      return function(d) {
        return _this.scale.y(_this.value.y(d));
      };
    })(this));
  };

  SRscatter.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  SRscatter.prototype.updatepoi = function() {
    var Neighbours, d, d0, d1, dxAttr, halfway, poiNeighbours, yValWidth;
    if (this.poi == null) {
      this.focus.select('.poi-y-val-shad').attr('display', 'none');
      this.focus.select('.poi-y-val').attr('display', 'none');
      this.svg.selectAll('.dot').data(this.filteredData).style('fill', 'rgb(20, 44, 88)');
      return;
    }
    Neighbours = neighbours(this.filteredData, function(d) {
      return d.time;
    });
    poiNeighbours = Neighbours(this.poi);
    d;
    if (poiNeighbours.length === 1) {
      d = poiNeighbours[0];
    } else if (+poiNeighbours[0].time < +this.domain[0]) {
      d = poiNeighbours[1];
    } else if (+poiNeighbours[1].time > +this.domain[1]) {
      d = poiNeighbours[0];
    } else {
      d0 = poiNeighbours[0];
      d1 = poiNeighbours[1];
      halfway = d0.time + (d1.time - d0.time) / 2;
      d = this.poi.isBefore(halfway) ? d0 : d1;
    }
    this.svg.selectAll('.dot').data(this.filteredData).style('fill', (function(_this) {
      return function(f) {
        if (f.time === d.time) {
          return 'rgb(216, 34, 42)';
        }
      };
    })(this));
    yValWidth = +this.focus.select('.poi-y-val').node().getComputedTextLength();
    if ((this.dimensions[0] - (this.scale.x(this.poi)) - yValWidth) < yValWidth) {
      dxAttr = -yValWidth - 8;
    } else {
      dxAttr = 8;
    }
    this.focus.select('.poi-y-val-shad').attr('display', null).attr('transform', "translate(" + (this.scale.x(d.time)) + ", " + (this.scale.y(d[this.options.field])) + ")").attr('dx', dxAttr).text((d[this.options.field].toPrecision(3)) + " (" + this.options.units + ")");
    return this.focus.select('.poi-y-val').attr('display', null).attr('transform', "translate(" + (this.scale.x(d.time)) + ", " + (this.scale.y(d[this.options.field])) + ")").attr('dx', dxAttr).text((d[this.options.field].toPrecision(3)) + " (" + this.options.units + ")");
  };

  SRscatter.prototype.resize = function(dimensions) {
    this.dimensions = dimensions;
    this.drawDots(this.dotContainer, this.filteredData);
    return this.updatepoi();
  };

  return SRscatter;

})();
