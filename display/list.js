// Generated by CoffeeScript 1.9.2

/*

List components.
 */
module.exports = function(spec, components) {
  var items, list;
  if (!(spec instanceof Array)) {
    spec = [spec];
  }
  items = [];
  return list = {
    init: function(state, params) {
      var i, item, len, s;
      for (i = 0, len = spec.length; i < len; i++) {
        s = spec[i];
        if (components[s.type] == null) {
          return console.error(s.type + " component not found");
        }
        item = components[s.type](s, components);
        if (item.init != null) {
          item.init(state, params);
        }
        items.push(item);
      }
    },
    render: function(dom, state, params) {
      var i, item, len, results;
      results = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        results.push(item.render(dom, state, params));
      }
      return results;
    },
    resize: function(dimensions) {
      var i, item, len, results;
      results = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if (item.resize == null) {
          continue;
        }
        results.push(item.resize(dimensions));
      }
      return results;
    },
    query: function(params) {
      var i, item, key, len, query, ref, result;
      result = {};
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if (item.query != null) {
          ref = item.query(params);
          for (key in ref) {
            query = ref[key];
            result[key] = query;
          }
        }
      }
      return result;
    },
    remove: function(dom, state, params) {
      var i, item, len, results;
      results = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if (item.remove != null) {
          results.push(item.remove(dom, state, params));
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    items: items
  };
};
