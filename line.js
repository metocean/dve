// Generated by CoffeeScript 1.9.1
var SRline,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SRline = (function() {
  function SRline(options, params) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.provideMax = bind(this.provideMax, this);
    var end, getNeighbours, start;
    this.options = options;
    this.svg = params.svg, this.data = params.data, this.scale = params.scale, this.axis = params.axis, this.dimensions = params.dimensions, this.hub = params.hub, this.domain = params.domain;
    this.data = this.data.map(function(d) {
      var result;
      result = {
        time: d.time
      };
      result[options.field] = +d[options.field];
      if (result[options.field] === 0) {
        result[options.field] = null;
      }
      return result;
    });
    this.line = this.svg.append('path').attr('class', this.options.style + " " + this.options.type).attr('d', '');
    this.labelShad = this.svg.append('text').attr('class', 'label-shad').attr('text-anchor', 'start').attr('dy', 12).text(this.options.text + " (" + this.options.units + ")");
    this.label = this.svg.append('text').attr('class', 'label').attr('text-anchor', 'start').attr('dy', 12).text(this.options.text + " (" + this.options.units + ")");
    this.focus = this.svg.append('g').attr('class', 'focus');
    this.focus.append('circle').attr('class', 'poi-circle').attr('display', 'none').attr('r', 4);
    this.focus.append('text').attr('class', 'poi-y-val-shad').attr('display', 'none').attr('dy', '-0.3em');
    this.focus.append('text').attr('class', 'poi-y-val').attr('display', 'none').attr('dy', '-0.3em');
    this.data = this.data.filter((function(_this) {
      return function(d) {
        return d[_this.options.field] != null;
      };
    })(this));
    getNeighbours = neighbours(this.data, function(d) {
      return d.time;
    });
    start = getNeighbours(this.domain[0])[0];
    end = getNeighbours(this.domain[1]);
    end = end[end.length - 1];
    this.filteredData = this.data.filter((function(_this) {
      return function(d) {
        return +d.time >= +start.time && +d.time <= +end.time;
      };
    })(this));
    this.hub.on('poi', this.setpoi);
    this.hub.on('window dimensions changed', this.resize);
  }

  SRline.prototype.provideMax = function() {
    return d3.max(this.filteredData, (function(_this) {
      return function(d) {
        return d[_this.options.field];
      };
    })(this));
  };

  SRline.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  SRline.prototype.updatepoi = function() {
    var Neighbours, d, d0, d1, dxAttr, halfway, poiNeighbours, yValWidth;
    if (this.poi == null) {
      this.focus.select('.poi-circle').attr('display', 'none');
      this.focus.select('.poi-y-val-shad').attr('display', 'none');
      this.focus.select('.poi-y-val').attr('display', 'none');
      return;
    }
    yValWidth = +this.focus.select('.poi-y-val').node().getComputedTextLength();
    if ((this.dimensions[0] - (this.scale.x(this.poi)) - yValWidth) < yValWidth) {
      dxAttr = -yValWidth - 8;
    } else {
      dxAttr = 8;
    }
    Neighbours = neighbours(this.filteredData, function(d) {
      return d.time;
    });
    poiNeighbours = Neighbours(this.poi);
    d;
    if (poiNeighbours.length === 1) {
      d = poiNeighbours[0];
    } else if (+poiNeighbours[0].time < +this.domain[0]) {
      d = poiNeighbours[1];
    } else if (+poiNeighbours[1].time > +this.domain[1]) {
      d = poiNeighbours[0];
    } else {
      d0 = poiNeighbours[0];
      d1 = poiNeighbours[1];
      halfway = d0.time + (d1.time - d0.time) / 2;
      d = this.poi.isBefore(halfway) ? d0 : d1;
    }
    this.focus.select('.poi-circle').attr('display', null).attr('transform', "translate(" + (this.scale.x(d.time)) + ", " + (this.scale.y(d[this.options.field])) + ")");
    this.focus.select('.poi-y-val-shad').attr('display', null).attr('transform', "translate(" + (this.scale.x(d.time)) + ", " + (this.scale.y(d[this.options.field])) + ")").attr('dx', dxAttr).text((d[this.options.field].toPrecision(3)) + " (" + this.options.units + ")");
    return this.focus.select('.poi-y-val').attr('display', null).attr('transform', "translate(" + (this.scale.x(d.time)) + ", " + (this.scale.y(d[this.options.field])) + ")").attr('dx', dxAttr).text((d[this.options.field].toPrecision(3)) + " (" + this.options.units + ")");
  };

  SRline.prototype.resize = function(dimensions) {
    var labelWidth, path;
    this.dimensions = dimensions;
    path = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.scale.x(d.time);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.scale.y(d[_this.options.field]);
      };
    })(this));
    this.line.attr('d', path(this.filteredData));
    labelWidth = +this.label.node().getComputedTextLength();
    this.labelShad.attr('transform', "translate(" + (this.dimensions[0] - labelWidth) + ", " + (this.scale.y(this.filteredData[this.filteredData.length - 2][this.options.field])) + ")");
    this.label.attr('transform', "translate(" + (this.dimensions[0] - labelWidth) + ", " + (this.scale.y(this.filteredData[this.filteredData.length - 2][this.options.field])) + ")");
    return this.updatepoi();
  };

  return SRline;

})();
