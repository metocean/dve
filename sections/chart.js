// Generated by CoffeeScript 1.9.1
var ERchart,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERchart = (function() {
  function ERchart(svg, data, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    var clipId, drag, g, i, len, params, ref, s, soption;
    this.svg = svg;
    this.data = data;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.options.hub.on('poi', this.setpoi);
    this.options.hub.on('window dimensions changed', this.resize);
    this.svg.append('g').attr('class', 'title').append('text').attr('class', 'infotext').text(this.options.text).attr('dy', 20).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('g').attr('class', 'x axis').attr('transform', "translate(0," + this.canvas.height + ")");
    this.inner.append('g').attr('class', 'y axis');
    clipId = "clip-" + (Math.floor(Math.random() * 1000000));
    this.chart = this.inner.append('g').attr('class', 'chart').attr('clip-path', "url(#" + clipId + ")");
    this.chart.append('defs').append('clipPath').attr('id', clipId).append('rect').attr('x', '0').attr('y', '0');
    this.scale = {
      x: d3.time.scale().domain(this.domain),
      y: d3.scale.linear()
    };
    this.axis = {
      x: d3.svg.axis().scale(this.scale.x).orient("bottom").ticks(d3.time.hour),
      y: d3.svg.axis().scale(this.scale.y).orient("left").ticks(6)
    };
    this.poifsm = {
      hide: (function(_this) {
        return function() {
          if (_this.poi === null) {
            return;
          }
          return _this.options.hub.emit('poi', null);
        };
      })(this),
      show: (function(_this) {
        return function(x) {
          var d, range;
          range = _this.scale.x.range();
          if (range[0] > x || range[1] < x) {
            return _this.poifsm.hide();
          }
          d = _this.scale.x.invert(x);
          if (_this.poi === d) {
            return;
          }
          return _this.options.hub.emit('poi', moment(d));
        };
      })(this),
      update: (function(_this) {
        return function() {
          var dist, x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.startx != null) {
            dist = Math.abs(_this.poifsm.startx - x);
            if (dist < 10) {
              return;
            }
          }
          _this.poifsm.startx = null;
          return _this.poifsm.show(x);
        };
      })(this),
      mousedown: (function(_this) {
        return function() {
          var x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.currentx == null) {
            return _this.poifsm.show(x);
          }
          return _this.poifsm.startx = x;
        };
      })(this),
      mouseup: (function(_this) {
        return function() {
          var dist, x;
          if (_this.poifsm.startx == null) {
            return;
          }
          if (!_this.poifsm.currentx) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          dist = Math.abs(_this.poifsm.startx - _this.poifsm.currentx);
          if (dist < 10) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          x = d3.mouse(_this.inner.node())[0];
          return _this.poifsm.show(x);
        };
      })(this)
    };
    drag = d3.behavior.drag().on('drag', this.poifsm.update);
    this.series = [];
    this.maxDomains = [];
    ref = this.options.series;
    for (i = 0, len = ref.length; i < len; i++) {
      soption = ref[i];
      g = this.chart.append('g');
      params = {
        svg: g,
        data: data,
        scale: this.scale,
        axis: this.axis,
        dimensions: [this.canvas.width, this.canvas.height],
        hub: this.options.hub,
        domain: domain
      };
      s = new window["SR" + soption.type](soption, params);
      this.series.push(s);
      this.maxDomains.push(s.provideMax());
    }
    this.focus = this.inner.append('g').attr('class', 'focus');
    this.focus.append('line').attr('class', 'poi').attr('display', 'none').attr('y1', 0).attr('y2', this.canvas.height);
    this.focus.append('rect').attr('class', 'foreground').style('fill', 'none').on('mousedown', this.poifsm.mousedown).on('mouseup', this.poifsm.mouseup).call(drag);
    this.resize(dimensions);
  }

  ERchart.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: dimensions[0],
      height: 120
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 3,
      left: 200
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  ERchart.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  ERchart.prototype.updatepoi = function() {
    if (this.poi == null) {
      this.poifsm.currentx = this.scale.x(this.poi);
      this.focus.select('line.poi').attr('display', 'none');
      return;
    }
    this.poifsm.currentx = this.scale.x(this.poi);
    return this.focus.select('line.poi').attr('display', null).attr('x1', this.scale.x(this.poi)).attr('x2', this.scale.x(this.poi));
  };

  ERchart.prototype.resize = function(dimensions) {
    var i, len, ref, s;
    this.calculate_layout(dimensions);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.chart.select('rect').attr('width', this.canvas.width).attr('height', this.canvas.height);
    this.scale.y.domain([0, 1.1 * d3.max(this.maxDomains)]);
    this.scale.x.range([0, this.canvas.width]);
    this.scale.y.range([this.canvas.height, 0]);
    this.inner.select('.x.axis').call(this.axis.x.tickSize(-this.canvas.height, 0, 0).tickFormat(''));
    this.inner.selectAll('.x.axis .tick line').data(this.scale.x.ticks(this.axis.x.ticks()[0])).attr('class', function(d) {
      d = moment(d).format('HH');
      if (d === '00') {
        return 'major';
      } else if (d === '12') {
        return 'minor';
      } else {
        return 'sub-minor';
      }
    });
    this.inner.select('.y.axis').call(this.axis.y.tickSize(-this.canvas.width, 0, 0));
    this.inner.select('.y.axis .tick text').text(' ');
    this.inner.selectAll('.y.axis .tick line').data(this.scale.y.ticks(this.axis.y.ticks()[0])).attr('class', function(d) {
      if (d === 0) {
        return 'zero';
      } else {
        return null;
      }
    });
    this.focus.select('.foreground').attr('height', this.canvas.height).attr('width', this.canvas.width);
    ref = this.series;
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      s.resize([this.canvas.width, this.canvas.height]);
    }
    return this.updatepoi();
  };

  return ERchart;

})();
