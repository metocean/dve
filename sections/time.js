// Generated by CoffeeScript 1.9.1
var ERtime,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERtime = (function() {
  function ERtime(svg, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    this.build_date = bind(this.build_date, this);
    var accessors, drag;
    this.svg = svg;
    this.options = options;
    this.domain = domain;
    this.cycle = {
      every: moment.duration(this.options.every),
      offset: moment.duration(this.options.offset),
      duration: moment.duration(this.options.every)
    };
    accessors = {
      utc: function(d) {
        return d.utc();
      },
      local: function(d) {
        return d.local();
      },
      offset: function(d) {
        return d.zone - this.options.utcoffset;
      }
    };
    this.accessor = accessors[this.options.format];
    this.data = this.build_date(this.accessor);
    this.calculate_layout(dimensions);
    this.svg.append('rect').attr('class', 'background').attr('x', this.canvas.left).attr('y', this.canvas.top).attr('height', this.canvas.height);
    this.svg.append('g').attr('class', "canvas " + this.options.format).attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.svg.append('line').attr('class', 'poi').attr('display', 'none').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.svg.append('text').attr('class', 'poi').attr('display', 'none').attr('x', 0).attr('y', this.canvas.top + this.canvas.height / 2.8).text('AWESOME');
    hub.on('poi', this.setpoi);
    hub.on('window dimensions changed', this.resize);
    this.poifsm = {
      hide: (function(_this) {
        return function() {
          if (_this.poi === null) {
            return;
          }
          return hub.emit('poi', null);
        };
      })(this),
      show: (function(_this) {
        return function(x) {
          var d, range;
          range = _this.scale.range();
          if (range[0] > x || range[1] < x) {
            return _this.poifsm.hide();
          }
          d = _this.scale.invert(x);
          if (_this.poi === d) {
            return;
          }
          return hub.emit('poi', moment(d));
        };
      })(this),
      update: (function(_this) {
        return function() {
          var dist, x;
          x = d3.mouse(_this.svg.node())[0] - _this.canvas.left;
          if (_this.poifsm.startx != null) {
            dist = Math.abs(_this.poifsm.startx - x);
            if (dist < 10) {
              return;
            }
          }
          _this.poifsm.startx = null;
          return _this.poifsm.show(x);
        };
      })(this),
      mousedown: (function(_this) {
        return function() {
          var x;
          x = d3.mouse(_this.svg.node())[0] - _this.canvas.left;
          if (_this.poifsm.currentx == null) {
            return _this.poifsm.show(x);
          }
          return _this.poifsm.startx = x;
        };
      })(this),
      mouseup: (function(_this) {
        return function() {
          var dist, x;
          if (_this.poifsm.startx == null) {
            return;
          }
          if (!_this.poifsm.currentx) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          dist = Math.abs(_this.poifsm.startx - _this.poifsm.currentx);
          if (dist < 10) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          x = d3.mouse(_this.svg.node())[0] - _this.canvas.left;
          return _this.poifsm.show(x);
        };
      })(this)
    };
    drag = d3.behavior.drag().on('drag', this.poifsm.update);
    this.svg.append('rect').attr('class', 'foreground').attr('x', this.canvas.left).attr('y', this.canvas.top).attr('height', this.canvas.height).on('mousedown', this.poifsm.mousedown).on('mouseup', this.poifsm.mouseup).on('click', this.poifsm.click).call(drag);
    this.resize(dimensions);
  }

  ERtime.prototype.build_date = function(accessor) {
    var daycycle, localdomain, offset, startoflocalday, timecycle;
    startoflocalday = accessor(this.domain[0].clone().subtract(1, 'days')).startOf('day');
    offset = moment.duration(startoflocalday.diff(this.domain[0]));
    daycycle = {
      offset: offset,
      every: moment.duration('24h'),
      duration: moment.duration('24h')
    };
    timecycle = {
      every: this.cycle.every,
      offset: this.cycle.offset,
      duration: this.cycle.duration
    };
    localdomain = [accessor(this.domain[0].clone()), accessor(this.domain[1].clone())];
    return {
      days: moment.cycle(daycycle).expand(localdomain),
      times: moment.cycle(timecycle).expand(localdomain)
    };
  };

  ERtime.prototype.calculate_layout = function(dimensions) {
    this.margin = {
      top: 2,
      right: 20,
      bottom: 2,
      left: 20
    };
    this.dimensions = {
      width: dimensions[0],
      height: 52
    };
    return this.canvas = {
      top: this.margin.top,
      right: this.margin.right,
      bottom: this.margin.bottom,
      left: this.margin.left,
      width: this.dimensions.width - this.margin.left - this.margin.right,
      height: this.dimensions.height - this.margin.top - this.margin.bottom
    };
  };

  ERtime.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  ERtime.prototype.updatepoi = function() {
    if (this.poi == null) {
      this.poifsm.currentx = this.scale(this.poi);
      this.svg.select('line.poi').attr('display', 'none');
      this.svg.select('text.poi').attr('display', 'none').text('');
      this.svg.select('.canvas').selectAll('text.date').style('display', null);
      return;
    }
    this.poifsm.currentx = this.scale(this.poi);
    this.svg.select('line.poi').attr('display', null).attr('x1', this.canvas.left + this.scale(this.poi)).attr('x2', this.canvas.left + this.scale(this.poi));
    this.svg.select('text.poi').attr('display', null).attr('x', 3 + this.canvas.left + this.scale(this.poi)).text(this.accessor(this.poi.clone()).format('HH:mm ddd DD MMM ZZ'));
    return this.svg.select('.canvas').selectAll('text.date').style('display', 'none');
  };

  ERtime.prototype.resize = function(dimensions) {
    var date, inner, line, sep, time;
    this.calculate_layout(dimensions);
    this.scale = d3.time.scale().range([0, this.canvas.width]).domain(this.domain);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.svg.select('.background').attr('width', this.canvas.width);
    this.svg.select('.foreground').attr('width', this.canvas.width);
    inner = this.svg.select('g.canvas');
    sep = inner.selectAll('.sep').data(this.data.days);
    sep.enter().append('line').attr('class', 'sep');
    sep.attr('x1', (function(_this) {
      return function(d) {
        return _this.scale(d.start);
      };
    })(this)).attr('x2', (function(_this) {
      return function(d) {
        return _this.scale(d.start);
      };
    })(this)).attr('y1', 0).attr('y2', this.canvas.height);
    date = inner.selectAll('text.date').data(this.data.days);
    date.enter().append('text').attr('class', 'date');
    date.attr('x', (function(_this) {
      return function(d) {
        return _this.scale(d.start);
      };
    })(this)).attr('dx', 6).attr('y', this.canvas.height / 2.8).text(function(d) {
      return d.start.format('ddd DD MMM ZZ');
    });
    line = inner.selectAll('.line').data(this.data.times);
    line.enter().append('line').attr('class', 'line');
    line.attr('x1', (function(_this) {
      return function(d) {
        return -1 + _this.scale(d.start);
      };
    })(this)).attr('x2', (function(_this) {
      return function(d) {
        return -1 + _this.scale(d.start);
      };
    })(this)).attr('y1', (function(_this) {
      return function(d) {
        if (d.index % 6 === 0) {
          return _this.canvas.height / 1.85;
        } else {
          return _this.canvas.height / 1.15;
        }
      };
    })(this)).attr('y2', this.canvas.height);
    time = inner.selectAll('text.time').data(this.data.times);
    time.enter().append('text').attr('class', 'time');
    time.attr('x', (function(_this) {
      return function(d) {
        return _this.scale(d.start);
      };
    })(this)).attr('y', this.canvas.height / 1.4).attr('dx', 3).text(function(d) {
      if (d.index % 6 === 0) {
        return d.start.format('HH');
      } else {
        return '';
      }
    });
    return this.updatepoi();
  };

  return ERtime;

})();
