// Generated by CoffeeScript 1.9.1
var ERtablebytime,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERtablebytime = (function() {
  function ERtablebytime(svg, data, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.create_cells = bind(this.create_cells, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    var dataDom;
    this.svg = svg;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.data = data.map(function(d) {
      var result;
      result = {
        time: d.time
      };
      result[options.field] = +d[options.field];
      return result;
    });
    this.filteredData = this.data.filter((function(_this) {
      return function(d) {
        return +d.time >= +_this.domain[0] && +d.time <= +_this.domain[1];
      };
    })(this));
    this.scale = d3.time.scale().domain(this.domain).range([0, this.canvas.width]);
    this.field = {
      height: 30,
      width: 0
    };
    dataDom = [
      d3.min(this.filteredData, (function(_this) {
        return function(d) {
          return d[_this.options.field];
        };
      })(this)), d3.max(this.filteredData, (function(_this) {
        return function(d) {
          return d[_this.options.field];
        };
      })(this))
    ];
    this.colorScale = d3.scale.quantize().range(colorbrewer.Blues[9]).domain(dataDom);
    this.textcolorScale = d3.scale.quantize().range(["#000000", "#000000", "#ffffff", "#ffffff"]).domain(dataDom);
    this.svg.append('g').attr('class', 'title').attr('transform', "translate(" + this.title.left + "," + this.title.top + ")").append('text').attr('class', 'infotext').text(this.options.text).attr('dy', 18).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('line').attr('class', 'divider').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.container = this.inner.append('g').attr('class', 'container');
    this.create_cells();
    this.options.hub.on('window dimensions changed', this.resize);
    this.resize(dimensions);
  }

  ERtablebytime.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: dimensions[0],
      height: 30
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 200
    };
    this.title = {
      top: 0,
      right: this.dimensions.width - this.info.left,
      bottom: 0,
      left: 0,
      height: this.dimensions.height,
      width: this.info.left
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  ERtablebytime.prototype.create_cells = function() {
    var bisector, cellsEnter, data;
    bisector = d3.bisector(function(d) {
      return d.time;
    }).left;
    data = this.scale.ticks(d3.time.hour, 3).map((function(_this) {
      return function(d) {
        var index;
        index = bisector(_this.filteredData, d);
        return _this.filteredData[index];
      };
    })(this)).filter(function(d) {
      return d != null;
    });
    this.cells = this.container.selectAll('g.cell').data(data);
    cellsEnter = this.cells.enter().append('g').attr('class', 'cell').attr('class', (function(_this) {
      return function(d) {
        var hour;
        hour = d.time.local().get('hour');
        if (hour % 12 === 0) {
          return 'cell priority1';
        } else if (hour % 6 === 0) {
          return 'cell priority2';
        } else if (hour % 3 === 0) {
          return 'cell priority3';
        }
      };
    })(this));
    cellsEnter.append('rect').attr('height', this.field.height - 1).style('fill', (function(_this) {
      return function(d) {
        return _this.colorScale(d[_this.options.field]);
      };
    })(this));
    return cellsEnter.append('text').attr('y', this.field.height / 2).attr('dy', '0.35em').text((function(_this) {
      return function(d) {
        return d[_this.options.field];
      };
    })(this)).style('fill', (function(_this) {
      return function(d) {
        return _this.textcolorScale(d[_this.options.field]);
      };
    })(this));
  };

  ERtablebytime.prototype.resize = function(dimensions) {
    var bisector, data, minLabelWidth, p1, p1widths, p2, p2widths, p3, p3widths;
    this.calculate_layout(dimensions);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.scale.range([0, this.canvas.width]);
    bisector = d3.bisector(function(d) {
      return d.time;
    }).left;
    data = this.scale.ticks(d3.time.hour, 3).map((function(_this) {
      return function(d) {
        var index;
        index = bisector(_this.filteredData, d);
        return _this.filteredData[index];
      };
    })(this)).filter(function(d) {
      return d != null;
    });
    p1 = this.container.selectAll('.priority1');
    p2 = this.container.selectAll('.priority2');
    p3 = this.container.selectAll('.priority3');
    minLabelWidth = 31;
    p1widths = p1[0].length * minLabelWidth;
    p2widths = p2[0].length * minLabelWidth;
    p3widths = p3[0].length * minLabelWidth;
    switch (false) {
      case !(p1widths + p2widths + p3widths <= this.canvas.width):
        p2.attr('display', 'inline');
        p3.attr('display', 'inline');
        this.field.width = this.canvas.width / (p1[0].length + p2[0].length + p3[0].length);
        break;
      case !(p1widths + p2widths <= this.canvas.width):
        p2.attr('display', 'inline');
        p3.attr('display', 'none');
        this.field.width = this.canvas.width / (p1[0].length + p2[0].length);
        break;
      case !(p1widths <= this.canvas.width):
        p3.attr('display', 'none');
        p2.attr('display', 'none');
        this.field.width = this.canvas.width / p1[0].length;
    }
    this.cells = this.container.selectAll('g.cell').data(data);
    this.cells.attr('transform', (function(_this) {
      return function(d) {
        return "translate(" + (_this.scale(d.time) - _this.field.width / 2) + ", 0)";
      };
    })(this));
    this.container.selectAll('.cell rect').attr('width', this.field.width - 1);
    return this.container.selectAll('.cell text').attr('x', this.field.width / 2);
  };

  return ERtablebytime;

})();
