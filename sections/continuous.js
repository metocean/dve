// Generated by CoffeeScript 1.9.1
var ERcontinuous,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERcontinuous = (function() {
  function ERcontinuous(svg, data, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    var clipId, drag, end, gustNeighbours, start;
    this.svg = svg;
    this.data = data;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.svg.append('g').attr('class', 'title').attr('transform', "translate(" + this.title.left + "," + this.title.top + ")").append('text').attr('class', 'infotext').text(this.options.name).attr('dy', 20).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('line').attr('class', 'divider').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.inner.append('g').attr('class', 'x axis').attr('transform', "translate(0," + this.canvas.height + ")");
    this.inner.append('g').attr('class', 'y axis');
    clipId = "clip-" + (Math.floor(Math.random() * 1000000));
    this.chart = this.inner.append('g').attr('class', 'chart').attr('clip-path', "url(#" + clipId + ")");
    this.chart.append('defs').append('clipPath').attr('id', clipId).append('rect').attr('x', '0').attr('y', '0').attr('width', this.canvas.width).attr('height', this.canvas.height);
    this.windLine = this.chart.append('path').attr('class', 'line').attr('class', 'wind').attr('d', '');
    this.gustLine = this.chart.append('path').attr('class', 'line').attr('class', 'gust').attr('d', '');
    this.chart.append('text').attr('class', 'wind-label-shad').attr('dy', '10').attr('text-anchor', 'end').text('WSpd 10m (' + this.options.units + ')');
    this.chart.append('text').attr('class', 'wind-label').attr('dy', '10').attr('text-anchor', 'end').text('WSpd 10m (' + this.options.units + ')');
    this.chart.append('text').attr('class', 'gust-label-shad').attr('dy', '10').attr('text-anchor', 'end').text('Gust 10m (' + this.options.units + ')');
    this.chart.append('text').attr('class', 'gust-label').attr('dy', '10').attr('text-anchor', 'end').text('Gust 10m (' + this.options.units + ')');
    this.focus = this.inner.append('g').attr('class', 'focus');
    this.focus.append('line').attr('class', 'poi').attr('display', 'none').attr('y1', 0).attr('y2', this.dimensions.height);
    this.focus.append('circle').attr('class', 'wind poi-circle').attr('display', 'none').attr('r', 4);
    this.focus.append('text').attr('class', 'wind poi-y-val-shad').attr('display', 'none').attr('dy', '-0.3em');
    this.focus.append('text').attr('class', 'wind poi-y-val').attr('display', 'none').attr('dy', '-0.3em');
    this.focus.append('circle').attr('class', 'gust poi-circle').attr('display', 'none').attr('r', 4);
    this.focus.append('text').attr('class', 'gust poi-y-val-shad').attr('display', 'none').attr('dy', '-0.3em');
    this.focus.append('text').attr('class', 'gust poi-y-val').attr('display', 'none').attr('dy', '-0.3em');
    this.options.data = data.values.filter((function(_this) {
      return function(d) {
        return +d.time >= +_this.domain[0] && +d.time <= +_this.domain[1];
      };
    })(this));
    this.gust = data.values.filter((function(_this) {
      return function(d) {
        return d.Gust10m != null;
      };
    })(this));
    gustNeighbours = neighbours(this.gust, function(d) {
      return d.time;
    });
    start = gustNeighbours(this.domain[0])[0];
    end = gustNeighbours(this.domain[1]);
    end = end[end.length - 1];
    this.filteredGust = this.gust.filter((function(_this) {
      return function(d) {
        return +d.time >= +start.time && +d.time <= +end.time;
      };
    })(this));
    this.maxWind = d3.max(this.options.data, function(d) {
      return d.WSpd10m;
    });
    this.maxGust = d3.max(this.filteredGust, function(d) {
      return d.Gust10m;
    });
    this.scale = {};
    this.scale.x = d3.time.scale().domain(this.domain);
    this.scale.y = d3.scale.linear().domain([0, 1.1 * d3.max([this.maxGust, this.maxWind])]);
    this.axis = {};
    this.axis.x = d3.svg.axis().scale(this.scale.x).orient("bottom").ticks(d3.time.hour);
    this.axis.y = d3.svg.axis().scale(this.scale.y).orient("left").ticks(6);
    this.options.hub.on('poi', this.setpoi);
    this.options.hub.on('window dimensions changed', this.resize);
    this.poifsm = {
      hide: (function(_this) {
        return function() {
          if (_this.poi === null) {
            return;
          }
          return _this.options.hub.emit('poi', null);
        };
      })(this),
      show: (function(_this) {
        return function(x) {
          var d, range;
          range = _this.scale.x.range();
          if (range[0] > x || range[1] < x) {
            return _this.poifsm.hide();
          }
          d = _this.scale.x.invert(x);
          if (_this.poi === d) {
            return;
          }
          return _this.options.hub.emit('poi', moment(d));
        };
      })(this),
      update: (function(_this) {
        return function() {
          var dist, x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.startx != null) {
            dist = Math.abs(_this.poifsm.startx - x);
            if (dist < 10) {
              return;
            }
          }
          _this.poifsm.startx = null;
          return _this.poifsm.show(x);
        };
      })(this),
      mousedown: (function(_this) {
        return function() {
          var x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.currentx == null) {
            return _this.poifsm.show(x);
          }
          return _this.poifsm.startx = x;
        };
      })(this),
      mouseup: (function(_this) {
        return function() {
          var dist, x;
          if (_this.poifsm.startx == null) {
            return;
          }
          if (!_this.poifsm.currentx) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          dist = Math.abs(_this.poifsm.startx - _this.poifsm.currentx);
          if (dist < 10) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          x = d3.mouse(_this.inner.node())[0];
          return _this.poifsm.show(x);
        };
      })(this)
    };
    drag = d3.behavior.drag().on('drag', this.poifsm.update);
    this.focus.append('rect').attr('class', 'foreground').style('fill', 'none').on('mousedown', this.poifsm.mousedown).on('mouseup', this.poifsm.mouseup).call(drag);
    this.resize(dimensions);
  }

  ERcontinuous.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: dimensions[0],
      height: 250
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 1,
      left: 200
    };
    this.title = {
      top: 0,
      right: this.dimensions.width - this.info.left,
      bottom: 0,
      left: 0,
      height: this.dimensions.height,
      width: this.info.left
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  ERcontinuous.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  ERcontinuous.prototype.updatepoi = function() {
    var bisectDate, d, d0, d1, dxAttr, gustDomain, gustNeighbours, halfway, poiGustNeighbours, poiWindNeighbours, windDomain, windNeighbours;
    if (this.poi == null) {
      this.poifsm.currentx = this.scale.x(this.poi);
      this.focus.select('line.poi').attr('display', 'none');
      this.focus.select('.wind.poi-circle').attr('display', 'none');
      this.focus.select('.gust.poi-circle').attr('display', 'none');
      this.focus.select('.wind.poi-y-val-shad').attr('display', 'none');
      this.focus.select('.wind.poi-y-val').attr('display', 'none');
      this.focus.select('.gust.poi-y-val-shad').attr('display', 'none');
      this.focus.select('.gust.poi-y-val').attr('display', 'none');
      return;
    }
    this.poifsm.currentx = this.scale.x(this.poi);
    this.focus.select('line.poi').attr('display', null).attr('x1', this.scale.x(this.poi)).attr('x2', this.scale.x(this.poi));
    if ((this.canvas.width - this.scale.x(this.poi)) < 70) {
      dxAttr = -70;
    } else {
      dxAttr = 8;
    }
    bisectDate = d3.bisector(function(d) {
      return d.time;
    }).left;
    windDomain = d3.extent(this.options.data, function(d) {
      return d.time;
    });
    windNeighbours = neighbours(this.options.data, function(d) {
      return d.time;
    });
    poiWindNeighbours = windNeighbours(this.poi);
    d;
    if (poiWindNeighbours.length === 1) {
      d = poiWindNeighbours[0];
    } else if (+poiWindNeighbours[0].time < +this.domain[0]) {
      d = poiWindNeighbours[1];
    } else if (+poiWindNeighbours[1].time > +this.domain[1]) {
      d = poiWindNeighbours[0];
    } else {
      d0 = poiWindNeighbours[0];
      d1 = poiWindNeighbours[1];
      halfway = d0.time + (d1.time - d0.time) / 2;
      d = this.poi.isBefore(halfway) ? d0 : d1;
    }
    this.focus.select('.wind.poi-circle').attr('display', null).attr('transform', 'translate(' + this.scale.x(d.time) + ',' + this.scale.y(d.WSpd10m) + ')');
    this.focus.select('.wind.poi-y-val-shad').attr('display', null).attr('transform', 'translate(' + this.scale.x(d.time) + ',' + this.scale.y(d.WSpd10m) + ')').attr('dx', dxAttr).text(d.WSpd10m + ' (' + this.options.units + ')');
    this.focus.select('.wind.poi-y-val').attr('display', null).attr('transform', 'translate(' + this.scale.x(d.time) + ',' + this.scale.y(d.WSpd10m) + ')').attr('dx', dxAttr).text(d.WSpd10m + ' (' + this.options.units + ')');
    gustDomain = d3.extent(this.filteredGust, function(d) {
      return d.time;
    });
    gustNeighbours = neighbours(this.filteredGust, function(d) {
      return d.time;
    });
    poiGustNeighbours = gustNeighbours(this.poi);
    d;
    if (poiGustNeighbours.length === 1) {
      d = poiGustNeighbours[0];
    } else if (+poiGustNeighbours[0].time < +this.domain[0]) {
      d = poiGustNeighbours[1];
    } else if (+poiGustNeighbours[1].time > +this.domain[1]) {
      d = poiGustNeighbours[0];
    } else {
      d0 = poiGustNeighbours[0];
      d1 = poiGustNeighbours[1];
      halfway = d0.time + (d1.time - d0.time) / 2;
      d = this.poi.isBefore(halfway) ? d0 : d1;
    }
    this.focus.select('.gust.poi-circle').attr('display', null).attr('transform', 'translate(' + this.scale.x(d.time) + ',' + this.scale.y(d.Gust10m) + ')');
    this.focus.select('.gust.poi-y-val-shad').attr('display', null).attr('transform', 'translate(' + this.scale.x(d.time) + ',' + this.scale.y(d.Gust10m) + ')').attr('dx', dxAttr).text(d.Gust10m + ' (' + this.options.units + ')');
    return this.focus.select('.gust.poi-y-val').attr('display', null).attr('transform', 'translate(' + this.scale.x(d.time) + ',' + this.scale.y(d.Gust10m) + ')').attr('dx', dxAttr).text(d.Gust10m + ' (' + this.options.units + ')');
  };

  ERcontinuous.prototype.resize = function(dimensions) {
    var gustline, wSpdline;
    this.calculate_layout(dimensions);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.scale.x.range([0, this.canvas.width]);
    this.scale.y.range([this.canvas.height, 0]);
    this.focus.select('.foreground').attr('height', this.canvas.height).attr('width', this.canvas.width);
    this.inner.select('.x.axis').call(this.axis.x.tickSize(-this.canvas.height, 0, 0).tickFormat(''));
    this.inner.selectAll('.x.axis .tick line').data(this.scale.x.ticks(this.axis.x.ticks()[0])).attr('class', function(d) {
      d = moment(d).format('HH');
      if (d === '00') {
        return 'major';
      } else if (d === '12') {
        return 'minor';
      } else {
        return 'sub-minor';
      }
    });
    this.inner.select('.y.axis').call(this.axis.y.tickSize(-this.canvas.width, 0, 0));
    (this.inner.select('.y.axis .tick text')).text(' ');
    this.inner.selectAll('.y.axis .tick line').data(this.scale.y.ticks(this.axis.y.ticks()[0])).attr('class', function(d) {
      if (d === 0) {
        return 'zero';
      } else {
        return null;
      }
    });
    wSpdline = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.scale.x(d.time);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.scale.y(d.WSpd10m);
      };
    })(this));
    this.windLine.attr('d', wSpdline(this.options.data));
    gustline = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.scale.x(d.time);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.scale.y(d.Gust10m);
      };
    })(this));
    this.gustLine.attr('d', gustline(this.filteredGust));
    this.inner.select('.y.axis .domain').remove();
    this.inner.select('.wind-label-shad').attr('transform', 'translate(' + this.canvas.width + ', ' + this.scale.y(this.options.data[this.options.data.length - 1].WSpd10m) + ')');
    this.inner.select('.wind-label').attr('transform', 'translate(' + this.canvas.width + ', ' + this.scale.y(this.options.data[this.options.data.length - 1].WSpd10m) + ')');
    this.inner.select('.gust-label-shad').attr('transform', 'translate(' + this.canvas.width + ',' + this.scale.y(this.filteredGust[this.filteredGust.length - 1].Gust10m) + ')');
    this.inner.select('.gust-label').attr('transform', 'translate(' + this.canvas.width + ',' + this.scale.y(this.filteredGust[this.filteredGust.length - 1].Gust10m) + ')');
    return this.updatepoi();
  };

  return ERcontinuous;

})();
