// Generated by CoffeeScript 1.9.1
var ERsegments,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ERsegments = (function() {
  function ERsegments(svg, dimensions, options, domain) {
    this.resize = bind(this.resize, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    var duration, i, len, ref, s;
    this.svg = svg;
    this.options = options;
    this.domain = domain;
    duration = this.options.mean + this.options.max;
    duration /= 2;
    duration = Math.max(10, duration);
    this.cycle = {
      every: moment.duration(this.options.every),
      offset: moment.duration(this.options.offset),
      duration: moment.duration(duration + "m")
    };
    this.segments = moment.cycle(this.cycle).expand([this.domain[0].clone().subtract(12, 'h'), this.domain[1]]);
    this.segments = this.segments.filter((function(_this) {
      return function(s) {
        if (s.end.isBefore(_this.domain[0])) {
          return false;
        }
        if (s.start.isAfter(_this.domain[1])) {
          return false;
        }
        return true;
      };
    })(this));
    ref = this.segments;
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      if (s.start.isBefore(this.domain[0])) {
        s.start = this.domain[0].clone();
      }
      if (s.end.isAfter(this.domain[1])) {
        s.end = this.domain[1].clone();
      }
    }
    this.calculate_layout(dimensions);
    this.svg.append('g').attr('class', "canvas " + this.options.style).attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")").append('line').attr('x1', 0).attr('x2', this.canvas.width).attr('y1', 4).attr('y2', 4);
    this.svg.append('line').attr('class', 'poi').attr('display', 'none').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    hub.on('poi', this.setpoi);
    hub.on('window dimensions changed', this.resize);
    this.resize(dimensions);
  }

  ERsegments.prototype.calculate_layout = function(dimensions) {
    this.margin = {
      top: 1,
      right: 20,
      bottom: 1,
      left: 20
    };
    this.dimensions = {
      width: dimensions[0],
      height: 10
    };
    return this.canvas = {
      top: this.margin.top,
      right: this.margin.right,
      bottom: this.margin.bottom,
      left: this.margin.left,
      width: this.dimensions.width - this.margin.left - this.margin.right,
      height: this.dimensions.height - this.margin.top - this.margin.bottom
    };
  };

  ERsegments.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  ERsegments.prototype.updatepoi = function() {
    var inner;
    inner = this.svg.select('.canvas');
    inner.selectAll('.segment').data(this.segments).attr('class', (function(_this) {
      return function(d) {
        var ref;
        if ((d.start <= (ref = _this.poi) && ref < d.end)) {
          return "segment selected";
        }
        return 'segment';
      };
    })(this));
    inner.selectAll('.label').data(this.segments).attr('x', (function(_this) {
      return function(d) {
        if (_this.poi != null) {
          return _this.scale(_this.poi);
        }
        return 0;
      };
    })(this)).style('display', (function(_this) {
      return function(d) {
        var ref;
        if ((d.start <= (ref = _this.poi) && ref < d.end)) {
          return null;
        }
        return 'none';
      };
    })(this));
    inner.select('line').attr('class', (function(_this) {
      return function() {
        var d, i, len, ref, ref1;
        if (_this.poi == null) {
          return null;
        }
        ref = _this.segments;
        for (i = 0, len = ref.length; i < len; i++) {
          d = ref[i];
          if ((d.start <= (ref1 = _this.poi) && ref1 < d.end)) {
            return 'selected';
          }
        }
        return null;
      };
    })(this));
    return this.svg.select('line.poi').attr('display', (function(_this) {
      return function() {
        if (_this.poi == null) {
          return 'none';
        }
        return null;
      };
    })(this)).attr('x1', (function(_this) {
      return function() {
        if (_this.poi == null) {
          return 0;
        }
        return _this.canvas.left + _this.scale(_this.poi);
      };
    })(this)).attr('x2', (function(_this) {
      return function() {
        if (_this.poi == null) {
          return 0;
        }
        return _this.canvas.left + _this.scale(_this.poi);
      };
    })(this));
  };

  ERsegments.prototype.resize = function(dimensions) {
    var inner, label, segment;
    this.calculate_layout(dimensions);
    this.scale = d3.time.scale().range([0, this.canvas.width]).domain(this.domain);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    inner = this.svg.select('g.canvas');
    inner.select('line').attr('x2', this.canvas.width);
    segment = inner.selectAll('.segment').data(this.segments);
    segment.enter().append('rect').attr('class', 'segment').attr('y', 0).attr('rx', 2).attr('ry', 2).attr('height', 7);
    segment.attr('class', 'segment').attr('x', (function(_this) {
      return function(d) {
        return _this.scale(d.start);
      };
    })(this)).attr('width', (function(_this) {
      return function(d) {
        return _this.scale(d.end) - _this.scale(d.start) - 1;
      };
    })(this));
    label = inner.selectAll('.label').data(this.segments);
    label.enter().append('text').attr('class', 'label').attr('y', 7).attr('dx', 3).text(this.options.name);
    return this.updatepoi();
  };

  return ERsegments;

})();
