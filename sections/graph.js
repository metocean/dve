// Generated by CoffeeScript 1.9.1
var ERgraph,
  slice = [].slice;

ERgraph = (function() {
  function ERgraph(base, options) {
    this.base = base;
    this.options = options;
    d3.csv(this.options.source.url, (function(_this) {
      return function(error, data) {
        var d, dimensions, domain, durationformats, end, fn, fn1, hub, hub_listeners, j, k, len, len1, name, parse, parse_duration, parse_end, parse_start, parse_time, poi, ref, source, start, target, timeRegex, value;
        if (_this.options.source.translate != null) {
          for (j = 0, len = data.length; j < len; j++) {
            d = data[j];
            ref = _this.options.source.translate;
            for (target in ref) {
              source = ref[target];
              if (d[source] == null) {
                continue;
              }
              value = d[source];
              delete d[source];
              d[target] = value;
            }
          }
        }
        if (_this.options.source.include != null) {
          data = data.filter(function(d) {
            var key, ref1, shouldinclude;
            shouldinclude = true;
            ref1 = _this.options.source.include;
            for (key in ref1) {
              value = ref1[key];
              if (d[key] == null) {
                continue;
              }
              shouldinclude = shouldinclude && d[key] === value;
            }
            return shouldinclude;
          });
        }
        if (_this.options.source.exclude != null) {
          data = data.filter(function(d) {
            var key, ref1, shouldexclude;
            shouldexclude = false;
            ref1 = _this.options.source.exclude;
            for (key in ref1) {
              value = ref1[key];
              if (d[key] == null) {
                continue;
              }
              shouldexclude = shouldexclude && d[key] === value;
            }
            return !shouldexclude;
          });
        }
        parse_time = function(time) {
          return moment.utc(d.time, moment.ISO_8601);
        };
        if (_this.options.source.timeformat != null) {
          parse_time = function(time) {
            return moment.utc(d.time, _this.options.source.timeformat);
          };
        }
        for (k = 0, len1 = data.length; k < len1; k++) {
          d = data[k];
          d.time = parse_time(d.time);
        }
        domain = d3.extent(data, function(d) {
          return d.time;
        });
        timeRegex = /(\-|\+)[0-9]+([dwMyhms])/;
        start = _this.options.display.start;
        end = _this.options.display.end;
        parse_start = function(time) {
          return moment.utc(time, moment.ISO_8601);
        };
        parse_end = function(time) {
          return moment.utc(time, moment.ISO_8601);
        };
        parse_duration = function(str) {
          var duration, offset, offsetunit, sign;
          sign = str.substr(0, 1);
          offset = +str.substr(1, str.length - 2);
          offsetunit = str.substr(str.length - 1);
          if (sign === '-') {
            offset = -offset;
          }
          return duration = moment.duration(offset, offsetunit);
        };
        durationformats = {
          timestamp: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().add(duration);
          },
          second: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('second').add(duration);
          },
          minute: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('minute').add(duration);
          },
          hour: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('hour').add(duration);
          },
          day: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('day').add(duration);
          },
          week: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('week').add(duration);
          },
          month: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('month').add(duration);
          },
          year: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment.utc().startOf('year').add(duration);
          },
          localsecond: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('second').add(duration).utc();
          },
          localminute: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('minute').add(duration).utc();
          },
          localhour: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('hour').add(duration).utc();
          },
          localday: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('day').add(duration).utc();
          },
          localweek: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('week').add(duration).utc();
          },
          localmonth: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('month').add(duration).utc();
          },
          localyear: function(str) {
            var duration;
            duration = parse_duration(str);
            return moment().startOf('year').add(duration).utc();
          }
        };
        if (start != null) {
          if (typeof start === 'string') {
            fn = function(name, parse) {
              return parse_start = function(time) {
                return parse(start.slice(name.length));
              };
            };
            for (name in durationformats) {
              parse = durationformats[name];
              if (start.indexOf(name) !== 0) {
                continue;
              }
              fn(name, parse);
              break;
            }
            domain[0] = parse_start(start);
          } else {
            domain[0] = start;
          }
        }
        if (end != null) {
          if (typeof start === 'string') {
            fn1 = function(name, parse) {
              return parse_end = function(time) {
                return parse(end.slice(name.length));
              };
            };
            for (name in durationformats) {
              parse = durationformats[name];
              if (end.indexOf(name) !== 0) {
                continue;
              }
              fn1(name, parse);
              break;
            }
            domain[1] = parse_end(end);
          } else {
            domain[1] = end;
          }
        }
        poi = null;
        if (moment.utc().isBetween(domain[0], domain[1])) {
          poi = moment.utc();
        }
        hub_listeners = {};
        hub = {
          on: function(id, listener) {
            if (hub_listeners[id] == null) {
              hub_listeners[id] = [];
            }
            return hub_listeners[id].push(listener);
          },
          emit: function() {
            var args, h, id, l, len2, ref1, results;
            id = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            if (hub_listeners[id] == null) {
              return;
            }
            ref1 = hub_listeners[id];
            results = [];
            for (l = 0, len2 = ref1.length; l < len2; l++) {
              h = ref1[l];
              results.push(h.apply(null, args));
            }
            return results;
          }
        };
        dimensions = window.getDimensions();
        dimensions[0] -= 42;
        _this.base.selectAll('svg.item').data(_this.options.rows).enter().append('svg').each(function(d, i) {
          var svg;
          svg = d3.select(this).attr('class', "item " + d.type);
          d.hub = hub;
          new window["ER" + d.type](svg, data, dimensions, d, domain);
          return hub.emit('poi', poi);
        });
        return d3.select(window).on('resize', debounce(125, function() {
          var i, item, l, len2, ref1, results;
          dimensions = window.getDimensions();
          dimensions[0] -= 42;
          hub.emit('window dimensions changed', dimensions);
          ref1 = d3.selectAll('.graph');
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            i = ref1[l];
            results.push((function() {
              var len3, m, results1;
              results1 = [];
              for (m = 0, len3 = i.length; m < len3; m++) {
                item = i[m];
                if (item.resize != null) {
                  results1.push(item.resize(dimensions));
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            })());
          }
          return results;
        }));
      };
    })(this));
  }

  return ERgraph;

})();
