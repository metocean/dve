// Generated by CoffeeScript 1.9.1
var ERdirection,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

ERdirection = (function() {
  function ERdirection(svg, data, dimensions, options, domain) {
    this.calculate_direction = bind(this.calculate_direction, this);
    this.resize = bind(this.resize, this);
    this.create_directions = bind(this.create_directions, this);
    this.drawArrow = bind(this.drawArrow, this);
    this.updatepoi = bind(this.updatepoi, this);
    this.setpoi = bind(this.setpoi, this);
    this.calculate_layout = bind(this.calculate_layout, this);
    var drag;
    this.svg = svg;
    this.calculate_layout(dimensions);
    this.options = options;
    this.domain = domain;
    this.data = data.map(function(d) {
      var result;
      result = {
        time: d.time
      };
      result[options.field] = +d[options.field];
      return result;
    });
    this.svg.append('g').attr('class', 'title').attr('transform', "translate(" + this.title.left + "," + this.title.top + ")").append('text').attr('class', 'infotext').text(this.options.text).attr('dy', 18).attr('dx', 5);
    this.inner = this.svg.append('g').attr('class', 'inner').attr('transform', "translate(" + this.canvas.left + "," + this.canvas.top + ")");
    this.inner.append('line').attr('class', 'divider').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', this.dimensions.height);
    this.filteredData = this.data.filter((function(_this) {
      return function(d) {
        return +d.time >= +_this.domain[0] && +d.time <= +_this.domain[1];
      };
    })(this));
    this.scale = d3.time.scale().domain(this.domain).range([0, this.canvas.width]);
    this.create_directions();
    this.focus = this.inner.append('g').attr('class', 'focus');
    this.focus.append('line').attr('class', 'poi').attr('display', 'none').attr('y1', 0).attr('y2', this.dimensions.height);
    this.focus.append('circle').attr('class', 'arrow-background').attr('r', 25).attr('display', 'none');
    this.focus.append('g').attr('class', 'foc-section').attr('display', 'none');
    this.options.hub.on('poi', this.setpoi);
    this.options.hub.on('window dimensions changed', this.resize);
    this.poifsm = {
      hide: (function(_this) {
        return function() {
          if (_this.poi === null) {
            return;
          }
          return _this.options.hub.emit('poi', null);
        };
      })(this),
      show: (function(_this) {
        return function(x) {
          var d, range;
          range = _this.scale.range();
          if (range[0] > x || range[1] < x) {
            return _this.poifsm.hide();
          }
          d = _this.scale.invert(x);
          if (_this.poi === d) {
            return;
          }
          return _this.options.hub.emit('poi', moment.utc(d));
        };
      })(this),
      update: (function(_this) {
        return function() {
          var dist, x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.startx != null) {
            dist = Math.abs(_this.poifsm.startx - x);
            if (dist < 10) {
              return;
            }
          }
          _this.poifsm.startx = null;
          return _this.poifsm.show(x);
        };
      })(this),
      mousedown: (function(_this) {
        return function() {
          var x;
          x = d3.mouse(_this.inner.node())[0];
          if (_this.poifsm.currentx == null) {
            return _this.poifsm.show(x);
          }
          return _this.poifsm.startx = x;
        };
      })(this),
      mouseup: (function(_this) {
        return function() {
          var dist, x;
          if (_this.poifsm.startx == null) {
            return;
          }
          if (!_this.poifsm.currentx) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          dist = Math.abs(_this.poifsm.startx - _this.poifsm.currentx);
          if (dist < 10) {
            _this.poifsm.startx = null;
            return _this.poifsm.hide();
          }
          x = d3.mouse(_this.inner.node())[0];
          return _this.poifsm.show(x);
        };
      })(this)
    };
    drag = d3.behavior.drag().on('drag', this.poifsm.update);
    this.focus.append('rect').attr('class', 'foreground').attr('height', this.canvas.height).attr('width', this.canvas.width).style('fill', 'none').on('mousedown', this.poifsm.mousedown).on('mouseup', this.poifsm.mouseup).call(drag);
    this.resize(dimensions);
  }

  ERdirection.prototype.calculate_layout = function(dimensions) {
    this.dimensions = {
      width: dimensions[0],
      height: 60
    };
    this.info = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 200
    };
    this.title = {
      top: 0,
      right: this.dimensions.width - this.info.left,
      bottom: 0,
      left: 0,
      height: this.dimensions.height,
      width: this.info.left
    };
    return this.canvas = {
      top: this.info.top,
      right: this.info.right,
      bottom: this.info.bottom,
      left: this.info.left,
      width: this.dimensions.width - this.info.left - this.info.right,
      height: this.dimensions.height - this.info.top - this.info.bottom
    };
  };

  ERdirection.prototype.setpoi = function(poi) {
    this.poi = poi;
    return this.updatepoi();
  };

  ERdirection.prototype.updatepoi = function() {
    var Neighbours, d, d0, d1, halfway, poiNeighbours, xVal;
    if (this.poi == null) {
      this.focus.select('line.poi').attr('display', 'none');
      this.focus.select('.foc-section').attr('display', 'none');
      this.focus.select('.arrow-background').attr('display', 'none');
      return;
    }
    this.poifsm.currentx = this.scale(this.poi);
    this.focus.select('line.poi').attr('display', null).attr('x1', this.scale(this.poi)).attr('x2', this.scale(this.poi));
    Neighbours = neighbours(this.filteredData, function(d) {
      return d.time;
    });
    poiNeighbours = Neighbours(this.poi);
    d;
    if (poiNeighbours.length === 1) {
      d = poiNeighbours[0];
    } else if (+poiNeighbours[0].time < +this.domain[0]) {
      d = poiNeighbours[1];
    } else if (+poiNeighbours[1].time > +this.domain[1]) {
      d = poiNeighbours[0];
    } else {
      d0 = poiNeighbours[0];
      d1 = poiNeighbours[1];
      halfway = d0.time + (d1.time - d0.time) / 2;
      d = this.poi.isBefore(halfway) ? d0 : d1;
    }
    this.drawArrow(d[this.options.field], this.focus.select('.foc-section'));
    if ((this.canvas.width - this.scale(this.poi)) < 27) {
      xVal = this.canvas.width - 27;
    } else if ((this.canvas.left + this.scale(this.poi)) < 227) {
      xVal = 27;
    } else {
      xVal = this.scale(d.time);
    }
    this.focus.select('.arrow-background').attr('display', null).attr('transform', "translate(" + xVal + ", " + (this.canvas.height / 2) + ")");
    return this.focus.select('.foc-section').attr('display', null).attr('transform', "translate(" + xVal + ", " + ((this.canvas.height / 2) - 17) + ")");
  };

  ERdirection.prototype.drawArrow = function(dir, section) {
    var arrow;
    section.selectAll('*').remove();
    arrow = section.append('g').attr('transform', 'rotate(' + (dir + 180) + ', 0, 10)');
    arrow.append('path').attr('class', 'arrowhead').attr('d', d3.svg.symbol().type('triangle-up').size(20));
    arrow.append('line').attr('class', 'arrowline').attr('x1', 0).attr('x2', 0).attr('y1', 3).attr('y2', 20);
    return section.append('text').attr('class', 'label').text("" + (dir.toFixed(0)) + this.options.units).attr('text-anchor', 'middle').attr('transform', "translate(0,35)");
  };

  ERdirection.prototype.create_directions = function() {
    var arrow, bisector, data, section;
    bisector = d3.bisector(function(d) {
      return d.time;
    }).left;
    data = this.scale.ticks(d3.time.hour, 3).map((function(_this) {
      return function(d) {
        var index;
        index = bisector(_this.filteredData, d);
        return _this.filteredData[index];
      };
    })(this)).filter(function(d) {
      return d != null;
    });
    this.sections = this.svg.select('.inner').selectAll('.section').data(data);
    section = this.sections.enter().append('g').attr('class', (function(_this) {
      return function(d) {
        var hour;
        hour = d.time.local().get('hour');
        if (hour % 12 === 0) {
          return 'section priority1';
        } else if (hour % 6 === 0) {
          return 'section priority2';
        } else if (hour % 3 === 0) {
          return 'section priority3';
        }
      };
    })(this));
    arrow = section.append('g').attr('transform', (function(_this) {
      return function(d) {
        return "rotate(" + (d[_this.options.field] + 180) + ", 0, 9)";
      };
    })(this));
    arrow.append('path').attr('class', 'arrowhead').attr('d', d3.svg.symbol().type('triangle-up').size(20));
    arrow.append('line').attr('class', 'arrowline').attr('x1', 0).attr('x2', 0).attr('y1', 3).attr('y2', 20);
    return section.append('text').attr('class', 'label').text((function(_this) {
      return function(d) {
        return _this.calculate_direction(d[_this.options.field]);
      };
    })(this)).attr('text-anchor', 'middle').attr('transform', "translate(0,40)");
  };

  ERdirection.prototype.resize = function(dimensions) {
    var minLabelWidth, p1, p1widths, p2, p2widths, p3, p3widths;
    this.calculate_layout(dimensions);
    this.svg.attr('width', this.dimensions.width).attr('height', this.dimensions.height);
    this.scale.range([0, this.canvas.width]);
    this.sections.attr('transform', (function(_this) {
      return function(d) {
        return "translate(" + (_this.scale(d.time)) + ", 10)";
      };
    })(this));
    p1 = this.inner.selectAll('.priority1');
    p2 = this.inner.selectAll('.priority2');
    p3 = this.inner.selectAll('.priority3');
    minLabelWidth = 31;
    p1widths = p1[0].length * minLabelWidth;
    p2widths = p2[0].length * minLabelWidth;
    p3widths = p3[0].length * minLabelWidth;
    switch (false) {
      case !(p1widths + p2widths + p3widths <= this.canvas.width):
        p2.attr('display', 'inline');
        p3.attr('display', 'inline');
        break;
      case !(p1widths + p2widths <= this.canvas.width):
        p2.attr('display', 'inline');
        p3.attr('display', 'none');
        break;
      case !(p1widths <= this.canvas.width):
        p3.attr('display', 'none');
        p2.attr('display', 'none');
    }
    return this.updatepoi();
  };

  ERdirection.prototype.calculate_direction = function(degree) {
    var direction, text, textDirection;
    direction = Math.floor((degree / 22.5) + 0.5);
    text = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
    return textDirection = text[modulo(direction, 16)];
  };

  return ERdirection;

})();
